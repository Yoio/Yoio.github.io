/*globals paper, console, $ */
/*jslint nomen: true, undef: true, sloppy: true */

// neural network controlled agents avoid planks

// Derived from: The Nature of Code
// Daniel Shiffman
// http://natureofcode.com
// Separation
// Via Reynolds: http://www.red3d.com/cwr/steer/

/*    

@licstart  The following is the entire license notice for the 
JavaScript code in this page.

Copyright (C) 2015 david ha, otoro.net, otoro labs

The JavaScript code in this page is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.   


@licend  The above is the entire license notice
for the JavaScript code in this page.
*/




// brain amplify = 10 for wall, 1 for boid, 1 for feedback, 8 recurrent states, trained on collision

var initGenes = [];
var initGene = null;

var trainedGene00 = '{"fitness":14025,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.0799,"5":11.3286,"6":6.8607,"7":4.0696,"8":-1.9772,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-5.9009,"14":2.3333,"15":-0.9914,"16":0.6716,"17":-7.6386,"18":6.1399,"19":-1.2649,"20":-0.4363,"21":3.9101,"22":-12.3526,"23":1.5618,"24":-1.585,"25":-5.8079,"26":3.3904,"27":-0.4257,"28":0.645,"29":1.8951,"30":13.0468,"31":2.4309,"32":2.3434,"33":-4.896,"34":8.9832,"35":2.8141,"36":-14.8463,"37":12.6322,"38":4.7476,"39":-8.0722,"40":6.8298,"41":2.4966,"42":1.3656,"43":1.5504,"44":1.3788,"45":1.848,"46":6.0118,"47":-1.7115,"48":-0.495,"49":2.9077,"50":1.5705,"51":5.0692,"52":-1.8412,"53":-6.9225,"54":5.8874,"55":8.9537,"56":-0.9777,"57":-7.5955,"58":-2.4603,"59":12.375,"60":4.9118,"61":-0.9037,"62":-14.955,"63":-0.1045,"64":-1.5563,"65":-6.525,"66":-1.7705,"67":-5.2771,"68":0.1408,"69":-8.7994,"70":2.9284,"71":6.6835,"72":-1.6823,"73":6.2236,"74":7.5478,"75":10.7552,"76":5.4477,"77":3.8607,"78":-2.077,"79":2.5996,"80":-15.7789,"81":3.7464,"82":5.634,"83":3.9246,"84":6.9077,"85":-1.4573,"86":-8.9051,"87":-3.9186,"88":-0.5812,"89":5.8295,"90":7.4962,"91":-5.1707,"92":-2.582,"93":-1.7202,"94":7.2472,"95":4.6442,"96":10.2062,"97":0.9667,"98":-7.6942,"99":2.2973,"100":8.7394,"101":0.6713,"102":-0.5231,"103":8.053,"104":-0.8014,"105":3.4414,"106":8.2951,"107":-3.1867,"108":-3.0507,"109":7.8756,"110":-3.3452,"111":15.6184,"112":0.8501,"113":3.2294,"114":8.356,"115":-6.2802,"116":3.7488,"117":-4.3769,"118":-7.4668,"119":0.2482,"120":5.6801,"121":13.7777,"122":3.0946,"123":1.2952,"124":4.32,"125":-2.262,"126":-3.0052,"127":2.1056,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-9.9906,"133":-0.287,"134":7.1541,"135":0.7616,"136":-2.422,"137":4.1169,"138":2.6291,"139":-1.0364,"140":-4.0597,"141":-2.6,"142":-0.4879,"143":4.9983,"144":5.1534,"145":-4.4076,"146":2.9711,"147":-0.5744,"148":-4.1414,"149":-7.5875,"150":7.8281,"151":10.5438,"152":3.6409,"153":-0.1349,"154":-5.9898,"155":-2.35,"156":4.1539,"157":8.7752,"158":6.1545,"159":-1.4721,"160":-2.6619,"161":-3.5534,"162":-10.9815,"163":-0.2956,"164":-3.7663,"165":4.8763,"166":-3.856,"167":-2.3092,"168":0.8093,"169":2.691,"170":-5.456,"171":2.6537,"172":2.1815,"173":-2.4375,"174":-2.1432,"175":-10.4683,"176":7.0903,"177":1.3518,"178":13.2957,"179":1.7015,"180":-6.7498,"181":1.726,"182":-2.9447,"183":-5.9959,"184":3.5648,"185":11.624,"186":-6.3523,"187":-7.3064,"188":7.4155,"189":-7.9355,"190":8.943,"191":5.2728,"192":0.758,"193":-11.2499,"194":-2.8805,"195":-3.9226,"196":-3.8916,"197":7.9171,"198":-9.8308,"199":8.3251,"200":-0.2299,"201":-2.9071,"202":1.5995,"203":-0.6021,"204":7.4773,"205":9.326,"206":-7.2699,"207":1.1068,"208":6.3726,"209":5.3559,"210":-4.1109,"211":11.381,"212":6.1672,"213":7.8878,"214":-15.1931,"215":1.7916,"216":3.6273,"217":-8.7459,"218":-2.1116,"219":-0.6636,"220":3.2009,"221":-0.8297,"222":5.972,"223":-2.0553,"224":12.657,"225":0.7555,"226":-4.6921,"227":-1.3956,"228":-9.2655,"229":-2.099,"230":-2.3229,"231":-3.4922,"232":9.8813,"233":-7.1588,"234":-3.245,"235":1.746,"236":1.6799,"237":-2.2928,"238":10.0475,"239":1.824,"240":-6.9525,"241":2.9964,"242":-5.1251,"243":1.999,"244":1.0406,"245":-5.1665,"246":-5.3222,"247":3.5204,"248":7.4654,"249":4.7234,"250":-2.7395,"251":-4.2611,"252":2.3063,"253":-4.7803,"254":-0.9327,"255":-0.7501,"256":8.16,"257":6.6739,"258":-0.7941,"259":-3.6528,"260":-4.59,"261":-0.8418,"262":-9.7875,"263":2.4155,"264":7.849,"265":2.1308,"266":-2.9811,"267":3.8573,"268":-1.6525,"269":-2.4916}}';
var trainedGene01 = '{"fitness":13887,"nTrial":0,"gene":{"0":-13.3995,"1":-11.9301,"2":-1.6515,"3":3.4435,"4":3.5316,"5":13.6636,"6":6.4805,"7":4.0696,"8":-1.9772,"9":7.5462,"10":2.7758,"11":-1.3681,"12":4.098,"13":-3.4202,"14":1.2032,"15":-0.7941,"16":-0.2035,"17":-5.3339,"18":11.2053,"19":-0.106,"20":-0.1965,"21":5.5543,"22":-12.3526,"23":-0.1019,"24":-2.2047,"25":-8.8492,"26":1.525,"27":-0.1759,"28":0.5894,"29":3.4664,"30":17.0744,"31":-0.436,"32":0.9161,"33":-3.4681,"34":8.9749,"35":2.6547,"36":-13.7321,"37":12.6322,"38":3.0591,"39":-7.6183,"40":6.8467,"41":-0.2161,"42":2.2697,"43":-1.2472,"44":2.1658,"45":3.3742,"46":6.4606,"47":-0.6049,"48":-2.4279,"49":2.6945,"50":1.31,"51":4.0912,"52":-1.3189,"53":-7.3147,"54":9.0707,"55":8.2319,"56":-0.7912,"57":-4.4457,"58":0.5656,"59":13.1747,"60":6.2927,"61":-0.4969,"62":-13.3161,"63":-0.2027,"64":-5.4438,"65":-7.0798,"66":-3.1706,"67":-2.6182,"68":-0.6819,"69":-6.8326,"70":2.1687,"71":6.098,"72":-2.9092,"73":8.7234,"74":6.7658,"75":8.956,"76":4.212,"77":3.5611,"78":-0.2641,"79":3.244,"80":-16.892,"81":2.9649,"82":4.8598,"83":5.0159,"84":5.9205,"85":-2.2503,"86":-9.9284,"87":-3.0528,"88":-4.7077,"89":5.4727,"90":7.6698,"91":-6.4227,"92":-2.0125,"93":-2.2999,"94":6.8207,"95":6.139,"96":8.0847,"97":0.7049,"98":-8.1007,"99":1.5595,"100":7.9375,"101":-0.8657,"102":-0.7572,"103":6.4242,"104":-0.1625,"105":0.2581,"106":6.8972,"107":-2.2134,"108":-2.9669,"109":7.5319,"110":-0.9555,"111":17.5653,"112":-0.2554,"113":0.9493,"114":8.0518,"115":-11.1169,"116":3.9688,"117":-2.7009,"118":-10.1306,"119":-2.0271,"120":3.3704,"121":12.7366,"122":1.8692,"123":-0.8252,"124":4.55,"125":-2.8371,"126":-4.5373,"127":4.6376,"128":6.0058,"129":-1.6214,"130":0.8746,"131":-7.9784,"132":-11.2243,"133":-0.1479,"134":8.3606,"135":0.7616,"136":-2.8186,"137":4.5761,"138":4.3001,"139":-1.0302,"140":-3.3069,"141":-3.1136,"142":-0.6394,"143":4.3754,"144":5.1534,"145":-4.431,"146":2.9711,"147":-0.6347,"148":-3.9791,"149":-6.6325,"150":7.6029,"151":9.4951,"152":3.6409,"153":-2.1064,"154":-4.6188,"155":-2.6357,"156":5.8304,"157":9.0999,"158":6.1545,"159":-5.6886,"160":-1.3156,"161":-2.57,"162":-11.8968,"163":0.7997,"164":-3.7663,"165":6.4816,"166":-3.3008,"167":-3.2092,"168":2.6265,"169":1.9365,"170":-6.6035,"171":2.6537,"172":3.5378,"173":-5.9306,"174":-1.8197,"175":-10.4683,"176":9.967,"177":1.0714,"178":9.959,"179":-3.9982,"180":-7.6446,"181":-2.3965,"182":-2.7499,"183":-4.8375,"184":3.5648,"185":11.4329,"186":-4.9442,"187":-7.3064,"188":7.1888,"189":-6.5853,"190":9.8785,"191":0.7811,"192":2.0441,"193":-12.0032,"194":-6.2061,"195":-3.1159,"196":-3.6079,"197":5.6142,"198":-9.0207,"199":9.5669,"200":-0.3668,"201":-1.2733,"202":0.076,"203":-1.9189,"204":0.2394,"205":9.6833,"206":-5.2076,"207":2.0233,"208":5.3155,"209":6.0409,"210":-4.8506,"211":11.7032,"212":5.8682,"213":8.2893,"214":-15.8387,"215":0.5596,"216":3.9713,"217":-3.7909,"218":-0.6544,"219":-0.2072,"220":5.5584,"221":1.8242,"222":12.1093,"223":-2.243,"224":11.4374,"225":-0.1481,"226":-1.3602,"227":-0.8821,"228":-5.6078,"229":0.2028,"230":-2.3229,"231":-3.4922,"232":9.8256,"233":-8.2598,"234":-3.8765,"235":3.5371,"236":1.32,"237":-1.8775,"238":10.8233,"239":0.052,"240":-8.3617,"241":3.0085,"242":-5.7781,"243":3.2261,"244":0.3191,"245":-8.9045,"246":-5.7062,"247":3.7991,"248":8.9497,"249":0.4407,"250":-1.986,"251":-4.6709,"252":2.203,"253":-0.0459,"254":-2.6082,"255":-2.1398,"256":8.16,"257":6.6739,"258":-1.5358,"259":-6.9728,"260":-2.0293,"261":-0.6361,"262":-9.1967,"263":2.4155,"264":6.4314,"265":2.1308,"266":-1.4963,"267":2.7419,"268":-2.9775,"269":-2.689}}';
var trainedGene02 = '{"fitness":13036,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.0799,"5":11.3286,"6":6.8607,"7":4.0696,"8":-1.9772,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-5.9009,"14":2.3333,"15":-0.9914,"16":0.6716,"17":-7.6386,"18":6.1399,"19":-1.2649,"20":-0.4363,"21":3.9101,"22":-12.3526,"23":1.5618,"24":-1.585,"25":-5.8079,"26":3.3904,"27":-0.4257,"28":0.645,"29":1.8951,"30":13.0468,"31":2.4309,"32":2.3434,"33":-4.896,"34":8.9832,"35":2.8141,"36":-14.8463,"37":12.6322,"38":4.7476,"39":-8.0722,"40":6.8298,"41":2.4966,"42":1.3656,"43":1.5504,"44":1.3788,"45":1.848,"46":6.0118,"47":-1.7115,"48":-0.495,"49":2.9077,"50":1.5705,"51":5.0692,"52":-1.8412,"53":-6.9225,"54":5.8874,"55":8.9537,"56":-0.9777,"57":-7.5955,"58":-2.4603,"59":12.375,"60":4.9118,"61":-0.9037,"62":-14.955,"63":-0.1045,"64":-1.5563,"65":-6.525,"66":-1.7705,"67":-5.2771,"68":0.1408,"69":-8.7994,"70":2.9284,"71":6.6835,"72":-1.6823,"73":6.2236,"74":7.5478,"75":10.7552,"76":5.4477,"77":3.8607,"78":-2.077,"79":2.5996,"80":-15.7789,"81":3.7464,"82":5.634,"83":3.9246,"84":6.9077,"85":-1.4573,"86":-8.9051,"87":-3.9186,"88":-0.5812,"89":5.8295,"90":7.4962,"91":-5.1707,"92":-2.582,"93":-1.7202,"94":7.2472,"95":4.6442,"96":10.2062,"97":0.9667,"98":-7.6942,"99":2.2973,"100":8.7394,"101":0.6713,"102":-0.5231,"103":8.053,"104":-0.8014,"105":3.4414,"106":8.2951,"107":-3.1867,"108":-3.0507,"109":7.8756,"110":-3.3452,"111":15.6184,"112":0.8501,"113":3.2294,"114":8.356,"115":-6.2802,"116":3.7488,"117":-4.3769,"118":-7.4668,"119":0.2482,"120":5.6801,"121":13.7777,"122":3.0946,"123":1.2952,"124":4.32,"125":-2.262,"126":-3.0052,"127":2.1056,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-9.9906,"133":-0.287,"134":7.1541,"135":0.7616,"136":-2.422,"137":4.1169,"138":2.6291,"139":-1.0364,"140":-4.0597,"141":-2.6,"142":-0.4879,"143":4.9983,"144":5.1534,"145":-4.4076,"146":2.9711,"147":-0.5744,"148":-4.1414,"149":-7.5875,"150":7.8281,"151":10.5438,"152":3.6409,"153":-0.1349,"154":-5.9898,"155":-2.35,"156":4.1539,"157":8.7752,"158":6.1545,"159":-1.4721,"160":-2.6619,"161":-3.5534,"162":-10.9815,"163":-0.2956,"164":-3.7663,"165":4.8763,"166":-3.856,"167":-2.3092,"168":0.8093,"169":2.691,"170":-5.456,"171":2.6537,"172":2.1815,"173":-2.4375,"174":-2.1432,"175":-10.4683,"176":7.0903,"177":1.3518,"178":13.2957,"179":1.7015,"180":-6.7498,"181":1.726,"182":-2.9447,"183":-5.9959,"184":3.5648,"185":11.624,"186":-6.3523,"187":-7.3064,"188":7.4155,"189":-7.9355,"190":8.943,"191":5.2728,"192":0.758,"193":-11.2499,"194":-2.8805,"195":-3.9226,"196":-3.8916,"197":7.9171,"198":-9.8308,"199":8.3251,"200":-0.2299,"201":-2.9071,"202":1.5995,"203":-0.6021,"204":7.4773,"205":9.326,"206":-7.2699,"207":1.1068,"208":6.3726,"209":5.3559,"210":-4.1109,"211":11.381,"212":6.1672,"213":7.8878,"214":-15.1931,"215":1.7916,"216":3.6273,"217":-8.7459,"218":-2.1116,"219":-0.6636,"220":3.2009,"221":-0.8297,"222":5.972,"223":-2.0553,"224":12.657,"225":0.7555,"226":-4.6921,"227":-1.3956,"228":-9.2655,"229":-2.099,"230":-2.3229,"231":-3.4922,"232":9.8813,"233":-7.1588,"234":-3.245,"235":1.746,"236":1.6799,"237":-2.2928,"238":10.0475,"239":1.824,"240":-6.9525,"241":2.9964,"242":-5.1251,"243":1.999,"244":1.0406,"245":-5.1665,"246":-5.3222,"247":3.5204,"248":7.4654,"249":4.7234,"250":-2.7395,"251":-4.2611,"252":2.3063,"253":-4.7803,"254":-0.9327,"255":-0.7501,"256":8.16,"257":6.6739,"258":-0.7941,"259":-3.6528,"260":-4.59,"261":-0.8418,"262":-9.7875,"263":2.4155,"264":7.849,"265":2.1308,"266":-2.9811,"267":3.8573,"268":-1.6525,"269":-2.4916}}';
var trainedGene03 = '{"fitness":13029,"nTrial":0,"gene":{"0":-12.9619,"1":-13.4915,"2":-1.5193,"3":2.6168,"4":4.5381,"5":13.0792,"6":4.6726,"7":4.175,"8":-2.1519,"9":6.9102,"10":3.2568,"11":-1.2106,"12":4.098,"13":-6.4523,"14":2.3333,"15":-2.1608,"16":1.284,"17":-9.3761,"18":10.6471,"19":-0.3789,"20":0.2051,"21":4.0905,"22":-10.2523,"23":-2.2962,"24":-1.1705,"25":-7.7047,"26":3.454,"27":-1.9902,"28":0.3524,"29":1.8951,"30":12.6577,"31":2.4309,"32":1.901,"33":-4.896,"34":8.9749,"35":2.9178,"36":-14.8463,"37":11.1242,"38":3.7497,"39":-10.0917,"40":10.9532,"41":-0.5381,"42":2.3332,"43":-1.9296,"44":3.5497,"45":4.7718,"46":6.2153,"47":-0.6049,"48":-2.4279,"49":3.5155,"50":1.4641,"51":-0.2636,"52":-1.3189,"53":-7.0519,"54":6.8306,"55":8.2319,"56":-1.5567,"57":-6.388,"58":0.165,"59":11.7957,"60":7.5774,"61":0.5445,"62":-13.3161,"63":0.5475,"64":-6.7892,"65":-6.2369,"66":-2.4452,"67":0.2113,"68":-1.7352,"69":-6.8326,"70":1.8344,"71":4.7165,"72":-3.5793,"73":6.4786,"74":6.9259,"75":9.2406,"76":5.9775,"77":5.7957,"78":-2.077,"79":1.4781,"80":-16.2587,"81":7.8989,"82":6.8421,"83":3.4543,"84":6.9077,"85":0.2692,"86":-8.9051,"87":-3.9186,"88":-0.0168,"89":4.7433,"90":7.3815,"91":-3.2559,"92":-4.1088,"93":-3.1518,"94":6.1887,"95":3.7744,"96":8.0847,"97":3.7162,"98":-6.2295,"99":1.432,"100":10.2165,"101":-0.8657,"102":-1.0342,"103":7.0565,"104":-2.0817,"105":1.6797,"106":6.1332,"107":-4.4709,"108":-3.5172,"109":3.9994,"110":-4.431,"111":16.4899,"112":0.8371,"113":1.5071,"114":8.784,"115":-7.6876,"116":5.6684,"117":-4.181,"118":-9.2998,"119":-2.4351,"120":5.8869,"121":14.215,"122":1.1418,"123":1.2952,"124":2.0527,"125":-1.7997,"126":-3.0052,"127":2.1056,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-8.2452,"133":0.5137,"134":7.9295,"135":3.3518,"136":-2.422,"137":3.3004,"138":2.6158,"139":-1.0302,"140":-9.0693,"141":-4.7463,"142":-0.4879,"143":5.9019,"144":6.3696,"145":-4.4953,"146":1.3125,"147":-1.7631,"148":-2.9809,"149":-9.3863,"150":7.1228,"151":11.117,"152":3.6409,"153":-0.1349,"154":-5.1042,"155":-1.2376,"156":6.6758,"157":8.3971,"158":6.1545,"159":-2.4583,"160":-2.1727,"161":-3.5534,"162":-11.7688,"163":-1.3821,"164":-2.7374,"165":4.0283,"166":-4.3861,"167":-2.3092,"168":1.3773,"169":2.691,"170":-5.456,"171":2.6537,"172":3.5378,"173":-5.9306,"174":-1.8197,"175":-10.4683,"176":9.967,"177":1.0714,"178":9.959,"179":-3.9982,"180":-7.6446,"181":-2.3965,"182":-2.7499,"183":-3.5665,"184":3.5648,"185":11.4329,"186":-4.9442,"187":-7.3064,"188":7.1888,"189":-6.5853,"190":9.6378,"191":1.2139,"192":2.0441,"193":-12.0032,"194":-6.2061,"195":-3.1159,"196":-3.6079,"197":5.6142,"198":-9.0207,"199":9.5669,"200":-0.3668,"201":-1.2733,"202":0.076,"203":-1.9189,"204":0.2394,"205":8.4272,"206":-5.2076,"207":2.0233,"208":5.3155,"209":6.0409,"210":-5.9841,"211":11.6787,"212":7.0916,"213":8.2893,"214":-15.8387,"215":0.5596,"216":3.9713,"217":-5.8285,"218":-3.0638,"219":-0.2072,"220":5.5584,"221":1.8242,"222":12.1093,"223":-4.3335,"224":11.9923,"225":-0.0986,"226":-1.3602,"227":-0.8821,"228":-5.6078,"229":-0.6125,"230":-2.3229,"231":-3.0974,"232":9.8256,"233":-7.8061,"234":-3.8259,"235":3.5371,"236":-0.23,"237":-1.8775,"238":10.8233,"239":0.052,"240":-8.3617,"241":2.0439,"242":-5.7781,"243":3.2261,"244":0.3191,"245":-8.9045,"246":-5.7062,"247":3.7991,"248":8.9497,"249":0.4407,"250":-3.3014,"251":-4.6709,"252":2.203,"253":-0.0459,"254":-3.7275,"255":0.1088,"256":8.16,"257":6.6739,"258":-1.5358,"259":-6.9728,"260":-2.0293,"261":-0.6361,"262":-9.1967,"263":2.4155,"264":6.4314,"265":2.1308,"266":-1.4963,"267":1.7439,"268":-2.9775,"269":-2.689}}';
var trainedGene04 = '{"fitness":12948,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.222,"5":10.4974,"6":6.8607,"7":4.0696,"8":-3.1434,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-6.1353,"14":2.3333,"15":-1.6141,"16":0.7168,"17":-9.2018,"18":9.7881,"19":-1.2649,"20":0.7813,"21":3.4661,"22":-12.3526,"23":2.5046,"24":0.8182,"25":-6.2598,"26":4.2233,"27":-0.4257,"28":1.7209,"29":1.8951,"30":11.5932,"31":1.2428,"32":1.4896,"33":-4.2635,"34":8.9832,"35":3.4147,"36":-14.8463,"37":11.7724,"38":6.2025,"39":-10.3724,"40":7.9044,"41":2.3235,"42":1.0732,"43":2.0203,"44":1.3414,"45":0.8689,"46":6.1875,"47":-0.4604,"48":-0.3098,"49":0.2442,"50":1.5705,"51":7.5109,"52":0.0698,"53":-6.9225,"54":5.8874,"55":10.3382,"56":-0.9777,"57":-8.5211,"58":-2.6927,"59":12.375,"60":4.9118,"61":-3.2071,"62":-15.3888,"63":-1.9007,"64":-2.3916,"65":-8.3934,"66":-1.4912,"67":-5.2771,"68":-1.4141,"69":-8.6162,"70":2.7539,"71":6.9943,"72":-2.9092,"73":6.632,"74":6.9259,"75":10.7552,"76":4.8549,"77":5.7957,"78":-2.077,"79":2.5996,"80":-16.2164,"81":7.8989,"82":5.1126,"83":5.5213,"84":7.4536,"85":0.2692,"86":-8.9051,"87":-3.9186,"88":0.2758,"89":5.8295,"90":7.6824,"91":-4.8051,"92":-3.1449,"93":-1.7202,"94":6.1887,"95":1.2573,"96":8.0847,"97":1.5449,"98":-6.2295,"99":1.432,"100":7.9375,"101":-0.8657,"102":-2.5919,"103":6.4242,"104":-0.1625,"105":0.7615,"106":9.1813,"107":-1.7925,"108":-2.623,"109":8.6042,"110":-3.3452,"111":18.8371,"112":0.8371,"113":4.6037,"114":6.4979,"115":-7.4706,"116":5.6075,"117":-4.3769,"118":-9.2998,"119":-2.4351,"120":4.3566,"121":14.215,"122":3.0946,"123":1.2952,"124":4.32,"125":-2.262,"126":-3.0052,"127":2.4375,"128":3.4304,"129":-0.6302,"130":-0.0946,"131":-4.5132,"132":-10.4228,"133":0.4083,"134":7.1523,"135":0.7616,"136":-4.0961,"137":5.2445,"138":1.3485,"139":-1.0403,"140":-3.9687,"141":-3.1136,"142":-0.2061,"143":3.3753,"144":5.1534,"145":-5.3015,"146":2.7015,"147":-0.5744,"148":-3.9791,"149":-7.6864,"150":6.3924,"151":8.9921,"152":3.6409,"153":0.503,"154":-4.8376,"155":-1.4586,"156":4.016,"157":8.4788,"158":6.6871,"159":-2.5185,"160":-2.1502,"161":-5.8812,"162":-13.0324,"163":0.1305,"164":-1.6148,"165":4.5955,"166":-3.43,"167":-3.2475,"168":2.6265,"169":3.1455,"170":-7.3285,"171":6.5124,"172":3.2092,"173":-4.8718,"174":-2.517,"175":-9.9078,"176":10.1928,"177":2.5899,"178":8.5297,"179":-2.6635,"180":-5.0928,"181":-0.1176,"182":-0.2959,"183":-7.6829,"184":0.202,"185":16.4808,"186":-7.0537,"187":-6.9354,"188":2.2563,"189":-2.8934,"190":11.3768,"191":-1.8928,"192":0.6221,"193":-12.1128,"194":-8.0087,"195":-3.5573,"196":-4.8811,"197":7.0691,"198":-8.4418,"199":7.7744,"200":-0.3668,"201":-1.4809,"202":-1.5761,"203":-3.0064,"204":-1.6184,"205":9.6833,"206":-1.871,"207":3.563,"208":4.272,"209":0.9663,"210":-1.9175,"211":9.6007,"212":6.4148,"213":7.7206,"214":-15.9128,"215":-0.9502,"216":4.9582,"217":-3.5788,"218":0.7514,"219":1.6735,"220":5.8321,"221":1.8242,"222":10.9102,"223":-1.731,"224":9.7485,"225":-0.1481,"226":-1.7303,"227":0.1841,"228":-6.584,"229":-2.2908,"230":-4.7806,"231":-3.7597,"232":9.0971,"233":-8.2598,"234":-2.655,"235":3.5371,"236":1.32,"237":-3.499,"238":10.0242,"239":3.1998,"240":-10.2591,"241":2.7557,"242":-5.4742,"243":2.9317,"244":2.5255,"245":-6.1717,"246":-8.24,"247":3.5204,"248":7.4654,"249":4.6444,"250":-2.7395,"251":-2.2543,"252":1.1423,"253":-4.7803,"254":-0.9327,"255":-0.0849,"256":8.16,"257":6.6739,"258":-3.0676,"259":-4.6023,"260":-2.6809,"261":-0.2611,"262":-11.6574,"263":7.8564,"264":6.6936,"265":2.123,"266":-2.0578,"267":2.1084,"268":-1.523,"269":-3.0547}}';
var trainedGene05 = '{"fitness":12903,"nTrial":0,"gene":{"0":-12.9619,"1":-13.4915,"2":-1.5193,"3":2.6168,"4":4.5381,"5":13.0792,"6":4.6726,"7":4.175,"8":-2.1519,"9":6.9102,"10":3.2568,"11":-1.2106,"12":4.098,"13":-6.4523,"14":2.3333,"15":-2.1608,"16":1.284,"17":-9.3761,"18":10.6471,"19":-0.3789,"20":0.2051,"21":4.0905,"22":-10.2523,"23":-2.2962,"24":-1.1705,"25":-7.7047,"26":3.454,"27":-1.9902,"28":0.3524,"29":1.8951,"30":12.6577,"31":2.4309,"32":1.901,"33":-4.896,"34":8.9749,"35":2.9178,"36":-14.8463,"37":11.1242,"38":3.7497,"39":-10.0917,"40":10.9532,"41":-0.5381,"42":2.3332,"43":-1.9296,"44":3.5497,"45":4.7718,"46":6.2153,"47":-0.6049,"48":-2.4279,"49":3.5155,"50":1.4641,"51":-0.2636,"52":-1.1237,"53":-7.0519,"54":6.0684,"55":8.2319,"56":-1.5567,"57":-6.388,"58":0.165,"59":11.7957,"60":7.5774,"61":0.5445,"62":-13.3161,"63":0.5475,"64":-6.7892,"65":-6.2369,"66":-2.3914,"67":0.2113,"68":-1.7352,"69":-6.8326,"70":1.8344,"71":4.7165,"72":-3.5793,"73":6.4786,"74":6.9259,"75":9.2406,"76":5.9775,"77":5.7957,"78":-2.077,"79":1.4781,"80":-16.2587,"81":7.8989,"82":6.8421,"83":3.4543,"84":6.9077,"85":0.2692,"86":-8.9051,"87":-3.9186,"88":-0.0168,"89":4.7433,"90":7.3815,"91":-3.2559,"92":-4.1088,"93":-3.1518,"94":6.1887,"95":3.7744,"96":8.0847,"97":3.7162,"98":-6.2295,"99":1.432,"100":10.2165,"101":-0.8657,"102":-1.0342,"103":7.0565,"104":-2.0817,"105":1.6797,"106":6.1332,"107":-4.4709,"108":-3.5172,"109":3.9994,"110":-4.431,"111":16.4899,"112":0.8371,"113":1.5071,"114":8.784,"115":-7.6876,"116":5.6684,"117":-4.181,"118":-9.2998,"119":-2.4351,"120":5.8869,"121":14.215,"122":1.1418,"123":1.2952,"124":2.0527,"125":-1.7997,"126":-3.0052,"127":2.1056,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-8.2452,"133":0.5137,"134":7.9295,"135":3.3518,"136":-2.422,"137":3.3004,"138":2.6158,"139":-1.0302,"140":-9.0693,"141":-4.7463,"142":-0.4879,"143":5.9019,"144":6.3696,"145":-4.4953,"146":1.3125,"147":-1.7631,"148":-2.9809,"149":-9.3863,"150":7.1228,"151":11.117,"152":3.6409,"153":-0.1349,"154":-5.1042,"155":-1.2376,"156":6.6758,"157":8.3971,"158":6.1545,"159":-2.4583,"160":-2.1727,"161":-3.5534,"162":-11.7688,"163":-1.3821,"164":-2.7374,"165":4.0283,"166":-4.3861,"167":-2.3092,"168":1.3773,"169":2.691,"170":-5.456,"171":2.6537,"172":3.5378,"173":-5.9306,"174":-1.8197,"175":-10.4683,"176":9.967,"177":1.0714,"178":9.959,"179":-3.9982,"180":-7.6446,"181":-2.3965,"182":-2.7499,"183":-3.5665,"184":3.5648,"185":11.4329,"186":-4.9442,"187":-7.3064,"188":7.1888,"189":-6.5853,"190":9.6378,"191":1.2139,"192":2.0441,"193":-12.0032,"194":-6.2061,"195":-3.1159,"196":-3.6079,"197":5.6142,"198":-9.0207,"199":9.5669,"200":-0.3668,"201":-1.2733,"202":0.076,"203":-1.9189,"204":0.2394,"205":8.4272,"206":-5.2076,"207":2.0233,"208":5.3155,"209":6.0409,"210":-5.9841,"211":11.6787,"212":7.0916,"213":8.2893,"214":-15.8387,"215":0.5596,"216":3.9713,"217":-5.8285,"218":-3.0638,"219":-0.2072,"220":5.5584,"221":1.8242,"222":12.1093,"223":-5.9011,"224":11.9923,"225":-0.0986,"226":-1.3602,"227":-0.8821,"228":-5.6078,"229":-0.6125,"230":-2.3229,"231":-3.0974,"232":9.8256,"233":-7.8061,"234":-3.8259,"235":3.5371,"236":-0.23,"237":-1.8775,"238":10.4545,"239":0.052,"240":-8.3617,"241":2.0439,"242":-5.7781,"243":3.2261,"244":0.3191,"245":-8.9045,"246":-5.7062,"247":3.7991,"248":8.9497,"249":0.4407,"250":-3.3014,"251":-4.6709,"252":2.203,"253":-0.0459,"254":-3.7275,"255":0.1088,"256":8.16,"257":6.6739,"258":-1.5358,"259":-6.9728,"260":-2.0293,"261":-0.6361,"262":-9.1967,"263":2.4155,"264":6.4314,"265":2.1308,"266":-1.4963,"267":1.7439,"268":-2.9775,"269":-2.689}}';
var trainedGene06 = '{"fitness":12666,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.0799,"5":10.4974,"6":7.0705,"7":4.0696,"8":-1.9772,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-5.9009,"14":2.3333,"15":-1.6141,"16":0.6716,"17":-7.3977,"18":9.7881,"19":-1.2649,"20":0.9569,"21":3.9101,"22":-12.3526,"23":1.5618,"24":-1.585,"25":-8.2274,"26":2.6461,"27":-0.4257,"28":0.645,"29":1.341,"30":13.0468,"31":2.2179,"32":2.3434,"33":-4.509,"34":8.9749,"35":2.8141,"36":-14.8463,"37":11.1006,"38":5.0608,"39":-8.428,"40":12.0926,"41":1.2877,"42":0.1032,"43":-0.4653,"44":3.1779,"45":3.662,"46":6.0118,"47":-2.7027,"48":-1.0098,"49":2.1635,"50":2.1734,"51":2.6343,"52":-1.8412,"53":-6.9225,"54":5.8874,"55":8.7418,"56":-1.4696,"57":-7.5955,"58":-2.4603,"59":10.4357,"60":5.6176,"61":-0.9037,"62":-14.955,"63":-0.1045,"64":-3.6619,"65":-6.1664,"66":-2.3374,"67":-5.2771,"68":0.1408,"69":-8.5248,"70":2.9284,"71":6.6835,"72":-1.6823,"73":6.5659,"74":7.5478,"75":10.767,"76":5.4477,"77":3.8607,"78":-2.077,"79":2.5996,"80":-14.9649,"81":3.7464,"82":5.5738,"83":5.926,"84":6.9275,"85":-1.4573,"86":-8.9051,"87":-3.9186,"88":-0.5812,"89":5.8295,"90":7.4962,"91":-5.1707,"92":-3.2606,"93":-0.027,"94":7.54,"95":5.781,"96":10.2062,"97":1.9373,"98":-7.6942,"99":2.2973,"100":7.8667,"101":4.3553,"102":-0.5231,"103":8.053,"104":-1.0524,"105":3.4414,"106":7.2261,"107":-3.1867,"108":-3.0507,"109":7.8756,"110":-3.6957,"111":15.3311,"112":0.8501,"113":3.2294,"114":8.356,"115":-6.2802,"116":4.3628,"117":-5.3932,"118":-6.8697,"119":2.9472,"120":5.6801,"121":14.4813,"122":3.7989,"123":2.1043,"124":4.32,"125":-2.4275,"126":-3.0052,"127":1.5253,"128":2.8788,"129":-1.1538,"130":1.137,"131":-2.127,"132":-12.6618,"133":-0.7818,"134":7.1541,"135":0.1804,"136":-2.422,"137":4.1169,"138":2.7625,"139":-1.0364,"140":-5.465,"141":-2.4146,"142":0.1104,"143":4.7363,"144":6.057,"145":-4.4076,"146":2.9711,"147":-1.7631,"148":-3.1202,"149":-8.6983,"150":5.0317,"151":8.8327,"152":2.4716,"153":-0.1349,"154":-4.9599,"155":-2.3101,"156":4.1539,"157":8.3782,"158":5.6934,"159":-3.0799,"160":-1.8987,"161":-1.8737,"162":-10.9815,"163":-1.8301,"164":-4.7828,"165":4.8763,"166":-3.1217,"167":-0.0779,"168":0.8093,"169":3.6803,"170":-4.9704,"171":4.2933,"172":0.8547,"173":-0.7208,"174":-1.3586,"175":-10.4683,"176":9.967,"177":1.0714,"178":9.959,"179":-3.9982,"180":-7.6446,"181":-2.3965,"182":-2.7499,"183":-4.8375,"184":3.782,"185":11.4329,"186":-4.9442,"187":-7.3064,"188":7.1888,"189":-6.5853,"190":9.5931,"191":0.7811,"192":2.0441,"193":-12.0032,"194":-6.2061,"195":-0.8167,"196":-3.6079,"197":5.6142,"198":-9.0207,"199":9.5669,"200":-0.3668,"201":-1.4029,"202":0.076,"203":-1.9189,"204":2.1095,"205":10.7214,"206":-5.7228,"207":2.0233,"208":4.7542,"209":6.0409,"210":-6.536,"211":11.0847,"212":5.9482,"213":8.2893,"214":-16.7516,"215":0.5596,"216":3.9713,"217":-4.4125,"218":-0.6544,"219":0.4088,"220":6.2912,"221":1.4946,"222":12.1093,"223":-2.243,"224":11.1786,"225":0.3749,"226":-1.7942,"227":1.5724,"228":-5.6078,"229":0.2028,"230":-2.3229,"231":-2.3855,"232":10.3152,"233":-9.1802,"234":-2.9568,"235":4.5049,"236":1.4486,"237":-0.5801,"238":8.1925,"239":-0.1669,"240":-6.959,"241":2.9737,"242":-5.1251,"243":1.999,"244":5.022,"245":-5.1665,"246":-6.714,"247":3.5204,"248":7.5298,"249":4.7234,"250":-2.7395,"251":-4.2611,"252":1.7653,"253":-4.7987,"254":-0.9327,"255":-0.8896,"256":8.16,"257":6.6739,"258":-0.7941,"259":-3.6528,"260":-4.59,"261":-2.5305,"262":-8.578,"263":2.9793,"264":8.8189,"265":2.2199,"266":-3.9624,"267":2.4831,"268":0.2934,"269":-2.4916}}';
var trainedGene07 = '{"fitness":12356,"nTrial":0,"gene":{"0":-15.4157,"1":-10.5121,"2":-1.7098,"3":2.8003,"4":1.9915,"5":11.7102,"6":3.8328,"7":4.2633,"8":-0.676,"9":6.2911,"10":1.0118,"11":-2.5816,"12":2.8813,"13":-7.1594,"14":2.5443,"15":-1.6177,"16":-3.8541,"17":-7.7612,"18":10.6877,"19":0.2037,"20":0.2571,"21":3.9892,"22":-9.9573,"23":2.3978,"24":-0.3849,"25":-8.9483,"26":3.1957,"27":-1.5129,"28":-0.694,"29":2.0039,"30":15.8465,"31":1.7812,"32":2.2219,"33":-4.0028,"34":8.5998,"35":1.9788,"36":-15.6164,"37":12.0215,"38":1.7068,"39":-7.2284,"40":6.2602,"41":0.6012,"42":1.2188,"43":-0.9992,"44":1.5142,"45":2.5226,"46":5.6386,"47":-0.5516,"48":-1.3328,"49":3.2883,"50":1.3848,"51":4.1991,"52":-2.0301,"53":-4.1416,"54":7.1143,"55":9.7933,"56":-1.1529,"57":-6.5392,"58":-1.842,"59":12.9359,"60":5.7304,"61":-0.8487,"62":-12.5653,"63":0.2078,"64":-4.0094,"65":-5.612,"66":-2.7878,"67":-4.0573,"68":0.5596,"69":-9.4956,"70":0.9254,"71":5.4674,"72":-2.3195,"73":6.3094,"74":6.8579,"75":9.8591,"76":5.4417,"77":3.8448,"78":-1.1046,"79":3.1714,"80":-16.7272,"81":3.4976,"82":5.4374,"83":4.1018,"84":6.3599,"85":-1.7473,"86":-8.7832,"87":-3.7994,"88":-2.4441,"89":4.5442,"90":7.7421,"91":-5.7671,"92":-0.6683,"93":-2.8816,"94":6.605,"95":5.9999,"96":8.4123,"97":1.2978,"98":-7.7304,"99":2.1438,"100":9.0596,"101":-0.5143,"102":0.7022,"103":5.3331,"104":-1.2816,"105":0.8263,"106":6.961,"107":-3.8573,"108":-3.4597,"109":6.5791,"110":-2.245,"111":15.1956,"112":0.8461,"113":2.5076,"114":8.7401,"115":-8.6168,"116":4.0028,"117":-3.0123,"118":-9.9944,"119":-3.1562,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":4.8111,"125":-1.2456,"126":-2.8117,"127":2.1715,"128":2.9801,"129":0.6941,"130":0.335,"131":-5.5483,"132":-8.3472,"133":-1.2958,"134":7.6175,"135":0.8687,"136":-2.7304,"137":5.311,"138":3.2084,"139":-1.3439,"140":-4.9691,"141":-1.1437,"142":-3.1614,"143":5.5551,"144":1.485,"145":-3.1472,"146":1.5358,"147":1.2974,"148":-3.2856,"149":-8.629,"150":5.8506,"151":8.6006,"152":1.6248,"153":0.5991,"154":-4.0825,"155":-2.1951,"156":4.4631,"157":6.0055,"158":7.0734,"159":-3.0697,"160":-4.823,"161":-3.382,"162":-11.0659,"163":0.3021,"164":-4.365,"165":4.7475,"166":-3.596,"167":-2.3293,"168":3.0718,"169":2.0507,"170":-4.9074,"171":5.5682,"172":2.2858,"173":-2.7108,"174":-1.8344,"175":-11.0277,"176":10.3655,"177":-0.7573,"178":9.7381,"179":-2.1581,"180":-8.5726,"181":-3.0214,"182":-0.9691,"183":-5.3426,"184":3.5795,"185":13.8702,"186":-5.7985,"187":-8.0039,"188":4.0164,"189":-4.902,"190":10.7286,"191":1.2238,"192":3.8714,"193":-10.6903,"194":-3.7123,"195":-3.352,"196":-3.9764,"197":6.4554,"198":-9.2184,"199":9.0344,"200":0.9136,"201":-2.4986,"202":-0.8429,"203":-0.9608,"204":1.6015,"205":10.3184,"206":-6.0883,"207":2.5405,"208":6.1707,"209":4.7193,"210":-3.0784,"211":11.9712,"212":7.5726,"213":7.4371,"214":-16.4089,"215":-0.6134,"216":3.6526,"217":-5.5712,"218":-1.0187,"219":0.3987,"220":4.7231,"221":1.8165,"222":10.8451,"223":-2.8371,"224":12.7052,"225":0.4419,"226":-0.8715,"227":1.673,"228":-6.3496,"229":-3.7048,"230":-1.1689,"231":-3.6708,"232":9.7121,"233":-4.4274,"234":-6.3582,"235":5.1424,"236":1.8566,"237":-0.0282,"238":10.1046,"239":0.7282,"240":-8.4538,"241":2.5881,"242":-5.3208,"243":1.7533,"244":1.5132,"245":-6.2493,"246":-5.8948,"247":3.0184,"248":8.3158,"249":3.8547,"250":-3.0471,"251":-4.2239,"252":3.7843,"253":-3.3798,"254":-2.5809,"255":-1.9876,"256":8.1683,"257":4.3581,"258":-1.3906,"259":-2.8746,"260":-2.0617,"261":-0.1761,"262":-11.3433,"263":3.6154,"264":8.1511,"265":1.7231,"266":-1.9081,"267":0.868,"268":-2.947,"269":-2.5125}}';
var trainedGene08 = '{"fitness":12282,"nTrial":0,"gene":{"0":-13.6134,"1":-9.2546,"2":-2.5089,"3":2.5605,"4":4.4213,"5":10.1527,"6":3.3141,"7":5.7354,"8":-0.8673,"9":7.942,"10":-0.5282,"11":-3.3122,"12":2.8295,"13":-5.6294,"14":3.4165,"15":-2.4545,"16":-4.234,"17":-7.9638,"18":10.4116,"19":-0.354,"20":0.668,"21":2.8551,"22":-10.1606,"23":2.5987,"24":1.3935,"25":-4.8649,"26":-0.0661,"27":3.9569,"28":-1.1669,"29":1.7755,"30":12.7422,"31":4.9302,"32":2.135,"33":-7.7469,"34":10.053,"35":-0.1498,"36":-17.5535,"37":15.2578,"38":4.4386,"39":-7.6713,"40":6.7706,"41":-0.6311,"42":2.7028,"43":0.6577,"44":2.7858,"45":1.4893,"46":3.0123,"47":2.7069,"48":-3.6494,"49":0.3217,"50":2.4746,"51":7.9418,"52":-3.7191,"53":-4.7319,"54":6.1027,"55":7.3006,"56":-1.0599,"57":-6.5204,"58":-2.8629,"59":15.0769,"60":8.7661,"61":1.2233,"62":-10.4922,"63":-4.1971,"64":-4.7054,"65":-7.308,"66":-1.3076,"67":-2.5778,"68":1.1079,"69":-9.6315,"70":4.6061,"71":4.1799,"72":-2.8737,"73":5.4363,"74":4.9626,"75":11.0451,"76":5.4732,"77":3.924,"78":-4.5247,"79":3.2305,"80":-18.1859,"81":6.6593,"82":4.7899,"83":3.5378,"84":1.977,"85":-1.8218,"86":-5.9332,"87":-5.1783,"88":-4.5638,"89":5.6064,"90":4.176,"91":1.2848,"92":-0.2451,"93":-1.4186,"94":6.605,"95":4.5881,"96":8.4123,"97":1.2978,"98":-7.7304,"99":2.1438,"100":9.0596,"101":-0.5143,"102":0.7022,"103":5.3331,"104":-1.2816,"105":0.8263,"106":8.7459,"107":-3.8573,"108":-3.4597,"109":6.5791,"110":-2.245,"111":15.1956,"112":0.8461,"113":2.5076,"114":8.7401,"115":-8.8741,"116":4.0028,"117":-3.0123,"118":-9.9944,"119":-3.1562,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":4.8111,"125":-1.2456,"126":-2.8117,"127":2.1715,"128":2.9801,"129":0.6941,"130":-0.342,"131":-5.5483,"132":-8.3472,"133":-1.2958,"134":7.6175,"135":0.8687,"136":-2.7304,"137":5.311,"138":3.2084,"139":-1.3439,"140":-4.9691,"141":-1.1437,"142":-3.1614,"143":5.5551,"144":1.485,"145":-3.1472,"146":0.641,"147":1.2974,"148":-3.2856,"149":-8.629,"150":4.3823,"151":8.6006,"152":1.6248,"153":0.5991,"154":-5.3625,"155":-2.1951,"156":4.4631,"157":6.0055,"158":7.0734,"159":-3.0697,"160":-4.9074,"161":-2.3034,"162":-11.0659,"163":0.3021,"164":-4.365,"165":4.7475,"166":-3.299,"167":-2.3293,"168":3.7085,"169":2.0507,"170":-4.6153,"171":5.5682,"172":2.2858,"173":-3.0644,"174":-1.8344,"175":-11.0277,"176":10.3655,"177":-1.8585,"178":10.1374,"179":-2.1581,"180":-8.5726,"181":-3.0214,"182":-0.9691,"183":-5.3426,"184":3.5795,"185":13.8702,"186":-5.7985,"187":-8.0039,"188":4.0164,"189":-4.902,"190":10.7286,"191":1.2238,"192":3.3761,"193":-12.2954,"194":-3.7123,"195":-3.5865,"196":-2.7423,"197":6.1222,"198":-9.386,"199":9.3018,"200":1.5289,"201":-4.0719,"202":-0.7972,"203":-0.9608,"204":1.8115,"205":9.4037,"206":-4.8405,"207":-0.7581,"208":5.2729,"209":3.442,"210":-1.8171,"211":12.3441,"212":7.0291,"213":10.4139,"214":-19.8055,"215":-0.2755,"216":-0.6386,"217":-6.7256,"218":-3.068,"219":1.6968,"220":4.2237,"221":5.0891,"222":11.2179,"223":-0.6292,"224":8.1629,"225":1.0723,"226":-2.3522,"227":-4.1128,"228":-7.9531,"229":0.8931,"230":-4.2034,"231":-4.2588,"232":10.0273,"233":-6.4922,"234":-5.3759,"235":5.6268,"236":0.7379,"237":1.234,"238":8.5546,"239":0.5204,"240":-7.8127,"241":1.4603,"242":-5.2277,"243":1.4904,"244":1.9804,"245":-4.4462,"246":-6.8498,"247":3.3382,"248":5.8719,"249":4.0324,"250":-2.6956,"251":-6.8255,"252":5.5826,"253":-3.7705,"254":-0.0311,"255":-1.4144,"256":5.016,"257":4.7992,"258":-1.7079,"259":-1.5698,"260":-1.4961,"261":-0.1761,"262":-11.3433,"263":4.42,"264":7.118,"265":1.8072,"266":-2.8814,"267":-0.1758,"268":-3.9204,"269":-3.6016}}';
var trainedGene09 = '{"fitness":12247,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.222,"5":10.4974,"6":6.8607,"7":4.0696,"8":-1.9772,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-5.9009,"14":2.3333,"15":-1.6141,"16":0.6716,"17":-7.3977,"18":9.7881,"19":-1.2649,"20":0.7813,"21":3.9101,"22":-12.3526,"23":1.5618,"24":-1.585,"25":-7.7047,"26":3.3904,"27":-0.4257,"28":0.645,"29":1.8951,"30":13.0468,"31":2.4309,"32":1.901,"33":-4.896,"34":8.9749,"35":2.8141,"36":-14.8463,"37":12.6322,"38":3.7497,"39":-8.428,"40":10.1384,"41":0.5191,"42":2.2697,"43":-1.2472,"44":3.1779,"45":3.3742,"46":6.3335,"47":-0.6049,"48":-2.4279,"49":1.7397,"50":1.31,"51":2.7476,"52":-1.3189,"53":-7.7492,"54":9.0707,"55":8.2319,"56":-0.7912,"57":-4.6353,"58":0.5656,"59":13.1747,"60":7.8257,"61":-0.4969,"62":-13.3161,"63":0.5475,"64":-6.6398,"65":-7.0798,"66":-2.897,"67":0.2113,"68":-0.6819,"69":-6.8326,"70":2.1687,"71":6.9943,"72":-2.9092,"73":6.632,"74":6.9259,"75":10.7552,"76":4.8549,"77":5.7957,"78":-2.077,"79":2.5996,"80":-16.2164,"81":7.8989,"82":5.634,"83":3.9246,"84":6.9077,"85":0.2692,"86":-8.9051,"87":-3.9186,"88":0.2758,"89":5.8295,"90":7.6824,"91":-3.2559,"92":-3.1449,"93":-1.7202,"94":6.1887,"95":1.2573,"96":8.0847,"97":1.5449,"98":-6.2295,"99":1.432,"100":7.9375,"101":-0.8657,"102":-2.0373,"103":6.4242,"104":-0.1625,"105":0.2581,"106":6.8972,"107":-2.2134,"108":-2.9669,"109":6.2579,"110":-0.3202,"111":16.2481,"112":-0.2554,"113":0.9493,"114":8.0518,"115":-11.6414,"116":3.9688,"117":-3.8933,"118":-9.6311,"119":-2.1093,"120":2.678,"121":14.9662,"122":1.8692,"123":-0.5273,"124":4.32,"125":-2.1717,"126":-3.8474,"127":3.6611,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-9.7979,"133":-1.0377,"134":7.9295,"135":0.7616,"136":-2.422,"137":3.9604,"138":1.821,"139":-1.0302,"140":-4.1355,"141":-2.3719,"142":-0.4879,"143":5.1684,"144":5.4949,"145":-4.431,"146":2.9711,"147":-1.3303,"148":-4.693,"149":-6.6529,"150":7.6029,"151":8.0544,"152":3.5505,"153":-2.2657,"154":-5.9426,"155":1.015,"156":4.0913,"157":8.4788,"158":6.6871,"159":-2.5185,"160":-2.1502,"161":-5.8812,"162":-13.0324,"163":0.1305,"164":-1.6148,"165":4.5955,"166":-3.43,"167":-3.2475,"168":2.6265,"169":3.1455,"170":-7.3285,"171":6.5124,"172":3.2092,"173":-4.8718,"174":-2.517,"175":-9.9078,"176":10.1928,"177":2.5899,"178":8.5297,"179":-2.6635,"180":-5.0928,"181":-0.1176,"182":-0.2959,"183":-7.6829,"184":0.202,"185":16.0206,"186":-7.0537,"187":-6.9354,"188":2.2563,"189":-2.8934,"190":12.1527,"191":-1.8928,"192":2.2808,"193":-12.1128,"194":-8.0087,"195":-3.5573,"196":-4.8811,"197":7.0691,"198":-8.4418,"199":7.7744,"200":-0.3668,"201":-2.3676,"202":-0.5231,"203":-3.0064,"204":-1.6184,"205":9.6833,"206":-1.871,"207":3.563,"208":4.272,"209":0.9663,"210":-1.9175,"211":9.6007,"212":6.4148,"213":7.7206,"214":-15.9128,"215":-0.9502,"216":4.6795,"217":-3.5788,"218":0.7514,"219":1.6735,"220":5.8321,"221":1.8242,"222":10.9102,"223":-1.731,"224":9.7485,"225":-0.1481,"226":-1.7303,"227":0.1841,"228":-6.584,"229":-2.2908,"230":-3.125,"231":-3.7597,"232":9.0971,"233":-8.2598,"234":-2.655,"235":3.5371,"236":1.32,"237":-3.499,"238":10.0242,"239":3.7596,"240":-10.2591,"241":2.7557,"242":-5.4742,"243":2.9317,"244":2.5255,"245":-6.1717,"246":-8.24,"247":2.5489,"248":9.6648,"249":5.4183,"250":-3.5021,"251":-5.2869,"252":4.4444,"253":-1.6661,"254":-2.6723,"255":-3.2659,"256":7.3969,"257":3.9571,"258":-1.114,"259":-2.2704,"260":-2.2583,"261":-0.4932,"262":-11.6574,"263":4.8445,"264":9.3776,"265":0.9518,"266":-2.0578,"267":2.1084,"268":-3.7551,"269":-1.0283}}';
var trainedGene10 = '{"fitness":12029,"nTrial":0,"gene":{"0":-12.2297,"1":-13.0355,"2":-2.0122,"3":3.4546,"4":3.0799,"5":10.4974,"6":6.8607,"7":4.0696,"8":-1.9772,"9":7.9164,"10":4.1362,"11":-3.5481,"12":4.098,"13":-5.9009,"14":2.3333,"15":-1.6141,"16":0.6716,"17":-7.3977,"18":9.7881,"19":-1.2649,"20":0.7813,"21":3.9101,"22":-12.3526,"23":1.5618,"24":-1.585,"25":-7.7047,"26":3.3904,"27":-0.4257,"28":0.645,"29":1.8951,"30":13.0468,"31":2.4309,"32":1.901,"33":-4.896,"34":8.9749,"35":2.8141,"36":-14.8463,"37":12.6322,"38":3.7497,"39":-8.428,"40":12.0926,"41":0.5191,"42":2.2697,"43":-1.2472,"44":3.1779,"45":3.3742,"46":6.3335,"47":-0.6049,"48":-2.4279,"49":1.7397,"50":1.31,"51":2.7476,"52":-1.3189,"53":-7.7492,"54":9.0707,"55":8.2319,"56":-0.7912,"57":-4.6353,"58":0.5656,"59":13.1747,"60":7.8257,"61":-0.4969,"62":-13.3161,"63":0.5475,"64":-6.6398,"65":-7.0798,"66":-2.897,"67":0.2113,"68":-0.6819,"69":-6.8326,"70":2.1687,"71":6.9943,"72":-2.9092,"73":6.632,"74":6.9259,"75":10.7552,"76":4.8549,"77":5.7957,"78":-2.077,"79":2.5996,"80":-16.2164,"81":7.8989,"82":5.634,"83":3.9246,"84":6.9077,"85":0.2692,"86":-8.9051,"87":-3.9186,"88":0.2758,"89":5.8295,"90":7.6824,"91":-3.2559,"92":-3.1449,"93":-1.7202,"94":6.1887,"95":1.2573,"96":8.0847,"97":1.5449,"98":-6.2295,"99":1.432,"100":7.9375,"101":-0.8657,"102":-2.0373,"103":6.4242,"104":-0.1625,"105":0.2581,"106":9.1813,"107":-1.7925,"108":-2.8985,"109":8.5289,"110":-3.3452,"111":18.8371,"112":0.8371,"113":4.6037,"114":6.4979,"115":-6.684,"116":5.6684,"117":-3.5602,"118":-9.399,"119":-2.0271,"120":1.4602,"121":11.7831,"122":1.8692,"123":0.7989,"124":4.55,"125":-4.7996,"126":-4.5373,"127":4.6376,"128":6.0058,"129":-1.6214,"130":0.8746,"131":-7.9784,"132":-11.2243,"133":-0.9363,"134":8.3606,"135":0.7616,"136":-2.8186,"137":2.6297,"138":3.4565,"139":-1.1513,"140":-3.3069,"141":-3.1136,"142":-0.8765,"143":4.3754,"144":4.998,"145":-4.431,"146":2.9711,"147":-0.6347,"148":-5.9711,"149":-11.1136,"150":6.5895,"151":9.5974,"152":3.6409,"153":-2.8203,"154":-4.6188,"155":-1.7589,"156":3.5135,"157":9.4265,"158":5.5728,"159":-5.6886,"160":-1.6484,"161":-1.6426,"162":-11.8968,"163":-1.2873,"164":-3.7663,"165":6.4816,"166":-3.3008,"167":-3.2092,"168":2.6265,"169":1.3652,"170":-6.6035,"171":5.3844,"172":3.5378,"173":-5.9306,"174":-2.7488,"175":-10.4683,"176":8.8562,"177":1.0714,"178":9.959,"179":-3.9982,"180":-10.595,"181":-2.3965,"182":-2.8593,"183":-5.9959,"184":2.9403,"185":12.5726,"186":-4.0599,"187":-8.4209,"188":3.7449,"189":-6.8309,"190":12.6494,"191":2.6723,"192":2.0849,"193":-10.9256,"194":-2.8805,"195":-5.6576,"196":-6.5608,"197":6.229,"198":-8.5582,"199":6.9543,"200":1.0329,"201":-2.026,"202":2.0343,"203":-0.2048,"204":3.0292,"205":10.6149,"206":-7.6135,"207":4.8018,"208":7.9866,"209":5.177,"210":-1.607,"211":10.9513,"212":8.4996,"213":7.5586,"214":-16.6575,"215":4.8681,"216":2.8884,"217":-11.1437,"218":-1.566,"219":0.41,"220":3.2009,"221":-0.8297,"222":7.5414,"223":-2.0553,"224":12.657,"225":3.2182,"226":-4.8359,"227":-1.6945,"228":-6.8663,"229":-2.099,"230":-1.9434,"231":-3.4922,"232":10.0449,"233":-6.2612,"234":-3.9564,"235":3.9101,"236":2.231,"237":-2.2928,"238":10.5568,"239":3.0003,"240":-6.9525,"241":1.2482,"242":-6.9047,"243":2.442,"244":1.0406,"245":-6.0224,"246":-5.3222,"247":3.5204,"248":7.4654,"249":4.6444,"250":-2.7395,"251":-2.551,"252":3.8384,"253":-4.7803,"254":-0.9327,"255":-0.8767,"256":8.16,"257":6.6739,"258":-0.7941,"259":-3.6528,"260":-4.59,"261":-0.8418,"262":-9.7875,"263":2.4155,"264":7.849,"265":2.1308,"266":0.2294,"267":3.0209,"268":-3.3072,"269":-2.689}}';
var trainedGene11 = '{"fitness":11967,"nTrial":0,"gene":{"0":-13.1107,"1":-13.0355,"2":-1.5193,"3":3.0706,"4":2.5699,"5":13.5159,"6":5.5109,"7":4.175,"8":-1.9772,"9":6.9102,"10":3.9035,"11":-1.3681,"12":4.098,"13":-5.9531,"14":2.9806,"15":-2.1608,"16":-0.1751,"17":-7.3977,"18":10.596,"19":-0.6355,"20":0.7813,"21":4.523,"22":-10.2523,"23":0.571,"24":-1.4162,"25":-8.8492,"26":1.525,"27":0.154,"28":-1.2923,"29":3.4279,"30":17.7404,"31":2.4309,"32":1.901,"33":-3.4681,"34":8.9749,"35":2.6547,"36":-15.1221,"37":10.8335,"38":4.9999,"39":-7.6183,"40":5.8852,"41":-0.7518,"42":1.3595,"43":-1.045,"44":2.1658,"45":1.2463,"46":6.0118,"47":-2.7027,"48":-0.8163,"49":1.1584,"50":2.1734,"51":2.6343,"52":-1.8412,"53":-6.4589,"54":5.8874,"55":9.6681,"56":-0.902,"57":-7.5955,"58":-0.8648,"59":14.4793,"60":4.3385,"61":-0.2064,"62":-12.7959,"63":-0.7006,"64":-3.6528,"65":-6.525,"66":-1.7705,"67":-4.2513,"68":0.1408,"69":-8.7994,"70":2.9284,"71":6.0919,"72":-1.6823,"73":6.2236,"74":7.0689,"75":10.7552,"76":5.4477,"77":3.8607,"78":-2.077,"79":2.1119,"80":-16.397,"81":3.7464,"82":5.634,"83":3.9246,"84":6.9077,"85":-1.4166,"86":-8.9051,"87":-4.4984,"88":-0.1225,"89":5.8295,"90":8.2518,"91":-5.1707,"92":-2.582,"93":-1.7202,"94":6.1887,"95":4.6442,"96":10.2062,"97":0.9667,"98":-7.6942,"99":2.2973,"100":8.2751,"101":0.6713,"102":-0.5231,"103":6.4053,"104":-1.9285,"105":3.4414,"106":8.2951,"107":-3.1867,"108":-3.0507,"109":7.2354,"110":-3.3452,"111":16.3042,"112":0.8371,"113":3.2294,"114":8.3047,"115":-7.4706,"116":5.6075,"117":-4.3769,"118":-9.2998,"119":-2.4351,"120":4.3566,"121":14.215,"122":1.7693,"123":1.2952,"124":4.32,"125":-1.7997,"126":-3.0052,"127":2.1056,"128":2.8788,"129":0.0035,"130":-0.0946,"131":-4.8885,"132":-9.9906,"133":-0.287,"134":7.9295,"135":0.7616,"136":-2.422,"137":3.8385,"138":2.6291,"139":-1.0302,"140":-4.0597,"141":-2.6,"142":-0.4879,"143":5.1684,"144":4.8034,"145":-4.4076,"146":2.9711,"147":-0.5744,"148":-3.7505,"149":-7.5875,"150":7.6029,"151":11.117,"152":3.6409,"153":-0.1349,"154":-5.1042,"155":-1.5533,"156":4.8345,"157":7.8783,"158":6.1545,"159":-2.5185,"160":-2.1727,"161":-3.5534,"162":-10.6961,"163":-0.4609,"164":-3.7663,"165":4.8763,"166":-3.856,"167":-2.3092,"168":1.7828,"169":2.691,"170":-5.456,"171":2.6537,"172":2.1815,"173":-3.8968,"174":-1.8197,"175":-10.4683,"176":9.3444,"177":1.0678,"178":9.959,"179":-3.9982,"180":-7.6446,"181":-2.3965,"182":-1.934,"183":-5.6906,"184":4.7689,"185":11.624,"186":-5.5572,"187":-7.4074,"188":6.9381,"189":-6.5853,"190":9.8785,"191":2.8903,"192":1.9497,"193":-10.0204,"194":-2.8805,"195":-3.8053,"196":-2.7365,"197":6.1775,"198":-8.1931,"199":7.8551,"200":0.0872,"201":-2.9071,"202":1.108,"203":-0.2048,"204":3.2137,"205":9.7417,"206":-6.6346,"207":2.9585,"208":7.9903,"209":5.0474,"210":-2.4846,"211":10.8967,"212":10.4617,"213":8.9322,"214":-18.0371,"215":0.9043,"216":4.3562,"217":-6.4987,"218":-0.8324,"219":-0.604,"220":5.7607,"221":1.4847,"222":11.0671,"223":-0.0613,"224":13.3689,"225":-0.4326,"226":-1.2537,"227":1.262,"228":-6.9867,"229":-3.3308,"230":-1.7284,"231":-2.8911,"232":8.9443,"233":-2.1873,"234":-8.1148,"235":5.9868,"236":1.6551,"237":-1.6967,"238":10.1095,"239":2.3804,"240":-9.5149,"241":1.7165,"242":-4.1257,"243":1.3676,"244":5.2413,"245":-6.1717,"246":-5.3446,"247":0.4193,"248":8.1355,"249":5.4183,"250":-1.6474,"251":-5.1781,"252":3.8688,"253":-1.6661,"254":-3.5776,"255":-2.4528,"256":7.3189,"257":3.9571,"258":-1.114,"259":-3.3779,"260":-2.4717,"261":-1.2638,"262":-12.7439,"263":4.0146,"264":7.2638,"265":1.4716,"266":-2.9483,"267":2.7173,"268":-3.2525,"269":-3.4414}}';
var trainedGene12 = '{"fitness":11495,"nTrial":0,"gene":{"0":-14.4447,"1":-10.5121,"2":-1.7098,"3":2.8003,"4":1.9915,"5":11.7102,"6":3.8328,"7":4.2633,"8":-0.676,"9":6.2911,"10":1.0118,"11":-2.5816,"12":2.8813,"13":-7.1594,"14":2.5443,"15":-1.6177,"16":-3.8541,"17":-7.7612,"18":10.6877,"19":0.2037,"20":0.2571,"21":3.9892,"22":-9.9573,"23":2.3978,"24":-0.3849,"25":-8.9483,"26":3.1957,"27":-1.5129,"28":-0.694,"29":2.0039,"30":15.8465,"31":1.7812,"32":2.2219,"33":-4.0028,"34":8.5998,"35":1.9788,"36":-15.6164,"37":12.0215,"38":1.7068,"39":-7.2284,"40":6.2602,"41":0.6012,"42":1.2188,"43":-0.9992,"44":1.5142,"45":2.5226,"46":5.6386,"47":-0.5516,"48":-1.3328,"49":3.2883,"50":1.3848,"51":4.1991,"52":-2.0301,"53":-4.1416,"54":7.1143,"55":9.7933,"56":-1.1529,"57":-6.5392,"58":-1.842,"59":12.9359,"60":5.7304,"61":-0.8487,"62":-12.5653,"63":-1.7069,"64":-4.0094,"65":-5.612,"66":-2.7878,"67":-4.0573,"68":0.5596,"69":-9.4956,"70":0.9254,"71":5.4674,"72":-2.3195,"73":6.3094,"74":6.8579,"75":9.8591,"76":6.4407,"77":3.8448,"78":-1.1046,"79":3.1714,"80":-16.7272,"81":3.4976,"82":5.4374,"83":4.1018,"84":6.3599,"85":-1.7473,"86":-8.7832,"87":-3.7994,"88":-2.4441,"89":4.5442,"90":7.7421,"91":-5.7671,"92":-0.6683,"93":-2.8816,"94":6.605,"95":4.5881,"96":8.4123,"97":1.2978,"98":-7.7304,"99":2.1438,"100":9.0596,"101":-0.5143,"102":0.7022,"103":5.3331,"104":-1.2816,"105":0.8263,"106":6.961,"107":-3.8573,"108":-3.4597,"109":6.5791,"110":-2.245,"111":15.1956,"112":0.8461,"113":2.5076,"114":8.7401,"115":-8.6168,"116":4.0028,"117":-3.0123,"118":-9.9944,"119":-3.1562,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":4.8111,"125":-1.2456,"126":-2.8117,"127":2.1715,"128":2.9801,"129":0.6941,"130":0.2098,"131":-5.5483,"132":-8.3472,"133":-1.2958,"134":7.6175,"135":0.8687,"136":-2.7304,"137":5.311,"138":3.2084,"139":-1.3439,"140":-4.9691,"141":-1.1437,"142":-3.1614,"143":5.5551,"144":1.485,"145":-3.1472,"146":1.5358,"147":1.2974,"148":-3.2856,"149":-8.629,"150":5.8506,"151":8.6006,"152":1.6248,"153":0.5991,"154":-4.0825,"155":-2.1951,"156":4.4631,"157":6.0055,"158":7.0734,"159":-3.0697,"160":-4.823,"161":-3.382,"162":-11.0659,"163":0.3021,"164":-4.365,"165":4.7475,"166":-3.596,"167":-2.3293,"168":3.7085,"169":2.0507,"170":-4.9074,"171":5.5682,"172":2.2858,"173":-2.7108,"174":-1.8344,"175":-11.0277,"176":10.3655,"177":-0.7573,"178":10.1374,"179":-2.1581,"180":-8.5726,"181":-3.0214,"182":-0.9691,"183":-5.3426,"184":3.5795,"185":13.8702,"186":-5.7985,"187":-8.0039,"188":4.0164,"189":-4.902,"190":10.7286,"191":1.2238,"192":3.8714,"193":-12.2954,"194":-3.7123,"195":-3.352,"196":-3.9764,"197":6.4554,"198":-9.2184,"199":9.0344,"200":0.9136,"201":-2.4986,"202":-0.8429,"203":-0.9608,"204":1.6015,"205":10.3184,"206":-6.0883,"207":2.5405,"208":6.1707,"209":4.7193,"210":-3.0784,"211":11.9712,"212":7.5726,"213":7.4371,"214":-19.0491,"215":-0.6134,"216":3.6526,"217":-5.5712,"218":-1.0187,"219":0.3987,"220":4.7231,"221":1.8165,"222":10.8451,"223":-2.8371,"224":12.7052,"225":0.4419,"226":-0.8715,"227":1.673,"228":-6.3496,"229":-3.7048,"230":-1.1689,"231":-3.6708,"232":9.7121,"233":-4.4274,"234":-6.3582,"235":5.1424,"236":1.8566,"237":-0.0282,"238":10.1046,"239":0.7282,"240":-8.4538,"241":2.5881,"242":-5.3208,"243":1.7533,"244":1.5132,"245":-6.08,"246":-5.8948,"247":3.0184,"248":8.3158,"249":3.8547,"250":-3.0471,"251":-4.2239,"252":3.7843,"253":-3.3798,"254":-2.5809,"255":-1.9876,"256":8.1683,"257":4.3581,"258":-1.3906,"259":-2.8746,"260":-2.0617,"261":-0.1761,"262":-11.3433,"263":3.6154,"264":7.6116,"265":1.7231,"266":-1.9081,"267":0.868,"268":-2.947,"269":-2.5125}}';
var trainedGene13 = '{"fitness":10839,"nTrial":0,"gene":{"0":-13.4191,"1":-10.7813,"2":-3.1731,"3":3.206,"4":4.4213,"5":10.1527,"6":5.5503,"7":5.7354,"8":-0.8673,"9":7.6762,"10":0.6479,"11":-0.6737,"12":2.8813,"13":-5.6688,"14":2.6444,"15":-2.6477,"16":-3.6022,"17":-7.7612,"18":7.0202,"19":0.5956,"20":0.2571,"21":1.8243,"22":-7.6127,"23":1.5567,"24":0.9638,"25":-7.1346,"26":2.5006,"27":-1.5129,"28":-0.2189,"29":2.0789,"30":14.4879,"31":2.965,"32":2.2219,"33":-3.8483,"34":6.1968,"35":1.9788,"36":-15.6164,"37":11.7726,"38":2.7736,"39":-7.51,"40":7.2089,"41":1.3181,"42":1.1531,"43":0.3163,"44":1.5731,"45":2.2488,"46":6.7147,"47":-0.1666,"48":-0.4136,"49":0.9872,"50":0.5527,"51":4.5247,"52":-1.6769,"53":-6.1356,"54":7.1143,"55":7.8456,"56":-0.6368,"57":-5.4898,"58":-0.7736,"59":11.618,"60":9.295,"61":-3.4949,"62":-9.6189,"63":-6.3933,"64":-7.5745,"65":-10.4324,"66":-2.8018,"67":-2.095,"68":-2.1038,"69":-9.256,"70":2.7087,"71":6.3856,"72":-2.587,"73":3.2115,"74":5.0466,"75":13.1008,"76":7.3285,"77":4.9635,"78":-2.6711,"79":3.7933,"80":-16.0691,"81":3.3226,"82":6.0116,"83":0.3534,"84":6.0012,"85":-1.0069,"86":-8.7106,"87":-5.8534,"88":-5.066,"89":2.1725,"90":1.5504,"91":3.4318,"92":-2.7523,"93":-4.5321,"94":9.0687,"95":6.6825,"96":7.7002,"97":2.5102,"98":-6.9748,"99":-0.1155,"100":10.5947,"101":-3.4809,"102":0.5397,"103":4.0686,"104":-3.7208,"105":-1.9151,"106":7.8935,"107":0.7109,"108":-2.895,"109":6.5791,"110":-2.245,"111":14.6952,"112":0.8461,"113":2.5076,"114":8.7401,"115":-8.6168,"116":4.0028,"117":-3.0123,"118":-9.9944,"119":-2.8377,"120":4.7918,"121":10.0452,"122":3.3665,"123":1.1198,"124":4.8111,"125":-0.4703,"126":-2.8117,"127":2.1715,"128":-0.0073,"129":0.6941,"130":0.2098,"131":-6.2515,"132":-8.3472,"133":-1.2958,"134":7.8111,"135":0.8687,"136":-2.7304,"137":5.311,"138":3.2084,"139":-1.3439,"140":-6.7121,"141":-1.1437,"142":-4.6684,"143":5.5551,"144":1.8302,"145":-7.5275,"146":4.2365,"147":1.6009,"148":-3.2856,"149":-6.1134,"150":5.8506,"151":8.6006,"152":0.5384,"153":1.1512,"154":-4.0825,"155":-1.4927,"156":4.7273,"157":6.0055,"158":6.7563,"159":-3.0697,"160":-5.7745,"161":-1.5022,"162":-11.0341,"163":-0.2672,"164":-4.6991,"165":3.891,"166":-3.0362,"167":-2.8029,"168":4.7628,"169":2.0507,"170":-4.1048,"171":5.5682,"172":2.2858,"173":-2.3883,"174":-1.8344,"175":-12.8318,"176":10.3655,"177":-0.7573,"178":10.9502,"179":-2.1581,"180":-8.5726,"181":-3.0214,"182":-0.9691,"183":-6.0607,"184":3.5795,"185":13.8702,"186":-5.068,"187":-8.6305,"188":4.0395,"189":-4.902,"190":10.2811,"191":1.2238,"192":3.8714,"193":-12.2954,"194":-3.7123,"195":-2.31,"196":-3.9117,"197":6.4554,"198":-9.2184,"199":9.0344,"200":0.9136,"201":-2.7963,"202":-0.8429,"203":0.4197,"204":1.6015,"205":11.0492,"206":-6.7958,"207":3.3901,"208":6.4773,"209":3.3571,"210":-2.697,"211":11.9712,"212":7.5726,"213":7.4371,"214":-19.0491,"215":-0.6134,"216":3.6526,"217":-5.5712,"218":-1.0187,"219":0.3987,"220":5.0732,"221":1.2816,"222":10.8451,"223":-2.8371,"224":12.7052,"225":1.7575,"226":-1.4804,"227":1.673,"228":-6.3496,"229":-4.0821,"230":-0.7478,"231":-3.5978,"232":10.1138,"233":-4.4274,"234":-6.3582,"235":5.1424,"236":1.3407,"237":-0.0282,"238":10.0174,"239":1.1413,"240":-7.8643,"241":2.5881,"242":-2.4452,"243":1.7533,"244":1.5132,"245":-6.08,"246":-6.1359,"247":4.3145,"248":8.3158,"249":4.7371,"250":-2.6947,"251":-4.2239,"252":3.7843,"253":-3.3798,"254":-2.5809,"255":-1.5724,"256":8.5682,"257":6.0397,"258":-1.3906,"259":-3.741,"260":-2.1946,"261":-0.1761,"262":-11.3433,"263":6.5172,"264":8.4097,"265":2.8592,"266":-1.9081,"267":2.6558,"268":-2.3096,"269":-4.1882}}';
var trainedGene14 = '{"fitness":10818,"nTrial":0,"gene":{"0":-13.838,"1":-8.0116,"2":-1.9422,"3":-0.3597,"4":4.4213,"5":12.2666,"6":5.4313,"7":5.7354,"8":-0.8673,"9":5.819,"10":0.6479,"11":-2.5816,"12":2.8813,"13":-5.6688,"14":3.8655,"15":-2.7527,"16":-3.6022,"17":-9.1736,"18":9.9354,"19":2.2128,"20":1.2124,"21":2.8195,"22":-7.9593,"23":3.579,"24":0.9638,"25":-4.8649,"26":3.2413,"27":3.0221,"28":-0.694,"29":0.6545,"30":12.7422,"31":2.965,"32":2.8449,"33":-6.6507,"34":7.7704,"35":1.9788,"36":-15.0128,"37":14.311,"38":4.7489,"39":-7.3655,"40":6.4434,"41":2.4805,"42":2.6348,"43":0.8014,"44":1.6632,"45":1.2617,"46":3.7827,"47":-0.5232,"48":-5.2047,"49":3.2287,"50":4.4283,"51":6.3542,"52":-4.7274,"53":-6.1633,"54":6.1665,"55":7.8363,"56":-0.0591,"57":-6.5027,"58":-0.7707,"59":12.2171,"60":6.3342,"61":-3.4949,"62":-11.2638,"63":-5.974,"64":-4.532,"65":-8.1634,"66":-0.2304,"67":-3.4375,"68":-2.5493,"69":-7.9614,"70":4.9521,"71":4.4241,"72":-1.4465,"73":4.4558,"74":6.3979,"75":11.8465,"76":5.5489,"77":3.8448,"78":-1.9628,"79":3.1714,"80":-17.9751,"81":3.8961,"82":4.8175,"83":3.0866,"84":5.8221,"85":-2.2633,"86":-5.4695,"87":-5.3232,"88":-2.4429,"89":3.2399,"90":3.9365,"91":-0.8797,"92":-0.8773,"93":-2.8816,"94":6.605,"95":6.4156,"96":7.4722,"97":0.6124,"98":-4.0831,"99":2.1438,"100":9.0596,"101":-0.6855,"102":0.187,"103":5.075,"104":-2.0659,"105":-3.1452,"106":11.5297,"107":-2.3104,"108":-4.5544,"109":5.1732,"110":-1.8412,"111":13.7573,"112":2.4922,"113":4.4889,"114":7.9034,"115":-8.6168,"116":2.8579,"117":-0.941,"118":-9.9688,"119":-4.0262,"120":3.7544,"121":9.1253,"122":3.8513,"123":-0.1898,"124":4.6286,"125":-0.6057,"126":0.3449,"127":5.0601,"128":1.321,"129":2.8966,"130":0.3021,"131":-5.5483,"132":-6.9802,"133":1.5873,"134":6.296,"135":1.0012,"136":-2.9856,"137":7.1371,"138":3.1809,"139":-1.1507,"140":-5.0042,"141":-1.1437,"142":-3.0723,"143":4.9101,"144":3.2656,"145":-4.9799,"146":1.5358,"147":0.4923,"148":-1.8088,"149":-9.6443,"150":4.8329,"151":8.6006,"152":2.1189,"153":0.6619,"154":-1.5185,"155":-1.4927,"156":5.4804,"157":6.0055,"158":6.3889,"159":-3.0697,"160":-5.7745,"161":-1.5022,"162":-10.0924,"163":0.3021,"164":-4.6991,"165":3.891,"166":-3.0362,"167":-2.8029,"168":4.7628,"169":2.0507,"170":-4.1048,"171":5.5682,"172":1.4795,"173":-2.2447,"174":-2.3243,"175":-11.0277,"176":10.3655,"177":0.8609,"178":10.1374,"179":-1.4008,"180":-8.8506,"181":-3.0214,"182":-0.524,"183":-3.7163,"184":4.8989,"185":15.0605,"186":-4.2182,"187":-8.0039,"188":2.3613,"189":-5.6281,"190":6.2188,"191":2.425,"192":3.1864,"193":-11.9207,"194":-3.5271,"195":-3.352,"196":-5.0683,"197":5.7841,"198":-9.2177,"199":9.3018,"200":0.9136,"201":-3.3311,"202":-0.5373,"203":-1.9787,"204":1.2294,"205":11.2227,"206":-6.7958,"207":1.1742,"208":6.4773,"209":3.3571,"210":-3.0784,"211":11.915,"212":7.2822,"213":5.5007,"214":-18.2832,"215":0.4919,"216":2.2059,"217":-4.804,"218":-1.3768,"219":1.7379,"220":4.7231,"221":4.4911,"222":10.0517,"223":-2.4593,"224":12.7052,"225":0.4419,"226":-2.5732,"227":1.8874,"228":-7.0652,"229":-3.9586,"230":-1.1689,"231":-5.4867,"232":10.0273,"233":-6.4211,"234":-6.6667,"235":4.9264,"236":1.0808,"237":2.3859,"238":9.2726,"239":-2.45,"240":-9.4365,"241":1.0333,"242":-4.8535,"243":0.827,"244":1.9697,"245":-3.9663,"246":-8.1068,"247":2.3124,"248":8.638,"249":4.3889,"250":-1.3078,"251":-7.5343,"252":3.8417,"253":-4.6744,"254":-2.3984,"255":-2.1227,"256":6.2311,"257":4.8748,"258":-1.1746,"259":-2.9027,"260":0.4199,"261":0.2132,"262":-12.8573,"263":4.9445,"264":8.43,"265":2.8612,"266":-4.1782,"267":2.2593,"268":-0.9923,"269":-2.8618}}';
var trainedGene15 = '{"fitness":10744,"nTrial":0,"gene":{"0":-13.8762,"1":-10.1839,"2":-2.5024,"3":2.285,"4":4.7891,"5":10.5498,"6":3.7909,"7":5.4943,"8":-1.0319,"9":5.8724,"10":2.7871,"11":-2.2335,"12":2.9304,"13":-4.6329,"14":4.6852,"15":-2.4782,"16":-3.8992,"17":-7.6437,"18":10.949,"19":1.5401,"20":-0.7887,"21":1.661,"22":-7.2576,"23":2.1994,"24":1.605,"25":-3.4741,"26":3.6601,"27":2.0024,"28":-2.6233,"29":2.8907,"30":13.3413,"31":4.3671,"32":3.8503,"33":-6.2634,"34":9.068,"35":1.5458,"36":-16.2555,"37":13.9116,"38":4.0764,"39":-6.0166,"40":5.7381,"41":2.1793,"42":1.7089,"43":1.5017,"44":2.2674,"45":1.8703,"46":2.1669,"47":0.3611,"48":-4.5173,"49":0.2159,"50":3.0242,"51":7.633,"52":-3.1229,"53":-6.3224,"54":6.9435,"55":7.2442,"56":-0.081,"57":-5.7488,"58":-2.5973,"59":13.3772,"60":7.2153,"61":-2.6526,"62":-10.4673,"63":-5.7488,"64":-4.0927,"65":-7.1488,"66":-1.6146,"67":-4.4166,"68":-2.5403,"69":-9.1355,"70":4.3712,"71":5.1324,"72":-1.8796,"73":5.2348,"74":4.4409,"75":11.7053,"76":5.8698,"77":4.3973,"78":-2.5406,"79":3.1556,"80":-15.9768,"81":5.1648,"82":4.7461,"83":3.3463,"84":3.6354,"85":-1.8522,"86":-5.0378,"87":-4.9154,"88":-2.0488,"89":3.2032,"90":3.9229,"91":0.0568,"92":-1.6929,"93":-0.7114,"94":5.5226,"95":7.0539,"96":5.6434,"97":0.4552,"98":-2.8073,"99":2.5805,"100":10.749,"101":-0.2531,"102":1.0187,"103":4.0638,"104":-1.0902,"105":-3.4946,"106":8.3076,"107":-2.3728,"108":-1.6733,"109":5.9376,"110":-0.9809,"111":15.5609,"112":1.7068,"113":2.6183,"114":8.5685,"115":-9.7439,"116":2.4286,"117":0.3281,"118":-9.2657,"119":-3.7726,"120":2.7164,"121":8.8214,"122":3.0533,"123":0.1691,"124":3.95,"125":-1.6786,"126":-0.7677,"127":4.1565,"128":2.6576,"129":1.8414,"130":1.0863,"131":-3.6614,"132":-8.5315,"133":-0.4933,"134":5.63,"135":1.2318,"136":-2.3937,"137":7.3235,"138":3.2373,"139":0.1695,"140":-1.5865,"141":-2.0326,"142":-3.7897,"143":5.019,"144":1.3091,"145":-5.5016,"146":1.6033,"147":-0.3061,"148":-2.0739,"149":-8.3786,"150":6.3386,"151":8.8223,"152":2.3354,"153":1.5005,"154":-1.8112,"155":-1.2199,"156":4.3051,"157":4.1438,"158":7.2638,"159":-2.2435,"160":-4.9874,"161":-0.1181,"162":-10.4951,"163":0.6908,"164":-3.1197,"165":3.6495,"166":-3.5859,"167":-3.4537,"168":3.3826,"169":0.888,"170":-2.2678,"171":5.6064,"172":1.5391,"173":-5.1285,"174":-1.0402,"175":-10.4034,"176":10.8289,"177":1.2263,"178":7.9465,"179":-1.1134,"180":-8.0257,"181":-2.4429,"182":0.7868,"183":-4.1244,"184":3.7388,"185":15.4379,"186":-4.429,"187":-6.9158,"188":2.4295,"189":-5.688,"190":7.1324,"191":3.171,"192":2.9388,"193":-11.5957,"194":-4.7469,"195":-3.8772,"196":-4.6483,"197":3.1782,"198":-8.9762,"199":10.3389,"200":1.5437,"201":-5.1177,"202":-0.5298,"203":-1.0367,"204":2.4191,"205":10.8287,"206":-7.0016,"207":2.6998,"208":4.2269,"209":4.6003,"210":-3.3733,"211":11.3406,"212":7.4225,"213":7.5051,"214":-16.8926,"215":0.2273,"216":1.0676,"217":-6.6691,"218":-1.3598,"219":0.5364,"220":4.8904,"221":2.1339,"222":10.24,"223":-0.7953,"224":11.7249,"225":1.3625,"226":-0.7993,"227":2.6539,"228":-7.412,"229":-2.953,"230":-1.1715,"231":-5.4234,"232":9.5148,"233":-3.5264,"234":-7.57,"235":4.5177,"236":1.4156,"237":0.9293,"238":8.7045,"239":0.0814,"240":-9.2956,"241":2.1749,"242":-3.9195,"243":2.5966,"244":2.6662,"245":-3.4149,"246":-7.27,"247":1.8084,"248":8.8352,"249":4.5409,"250":-4.0511,"251":-6.8711,"252":5.1797,"253":-4.3893,"254":-3.4043,"255":-3.0588,"256":5.3196,"257":4.8259,"258":-0.8713,"259":-2.9349,"260":-0.2883,"261":-0.6719,"262":-10.9556,"263":4.5034,"264":7.4917,"265":1.8686,"266":-0.2902,"267":1.9852,"268":-0.8069,"269":-2.8603}}';
var trainedGene16 = '{"fitness":10591,"nTrial":0,"gene":{"0":-13.0132,"1":-9.1874,"2":-1.9422,"3":2.8003,"4":1.9915,"5":11.8071,"6":3.8328,"7":4.2633,"8":-0.676,"9":6.2911,"10":0.728,"11":-1.8253,"12":2.8813,"13":-5.3804,"14":4.7964,"15":-2.267,"16":-3.6524,"17":-9.0869,"18":10.4116,"19":0.2037,"20":0.2571,"21":1.8243,"22":-7.6127,"23":1.5567,"24":0.9638,"25":-7.1346,"26":2.5006,"27":-1.5129,"28":-0.2189,"29":2.0039,"30":14.4879,"31":2.965,"32":2.2219,"33":-3.8483,"34":6.1968,"35":1.9788,"36":-15.6164,"37":11.7726,"38":2.7736,"39":-8.1344,"40":6.2602,"41":1.3181,"42":0.6633,"43":0.3163,"44":1.5731,"45":2.2488,"46":6.7147,"47":-0.5516,"48":-0.4136,"49":0.9872,"50":0.5527,"51":4.5247,"52":-1.6769,"53":-6.1356,"54":7.1143,"55":8.062,"56":-0.6368,"57":-5.0664,"58":-0.7736,"59":11.9459,"60":8.759,"61":-3.4949,"62":-9.6189,"63":-6.3933,"64":-7.5745,"65":-9.3247,"66":-2.8018,"67":-2.095,"68":-2.1038,"69":-9.256,"70":2.7087,"71":7.0037,"72":-2.587,"73":3.2115,"74":5.9334,"75":11.7419,"76":8.9796,"77":4.9635,"78":-2.6711,"79":3.1614,"80":-16.0691,"81":3.3226,"82":6.0116,"83":0.9774,"84":6.0012,"85":-1.0069,"86":-8.7106,"87":-5.8534,"88":-5.066,"89":2.1064,"90":0.5202,"91":3.4318,"92":-2.7523,"93":-4.5321,"94":9.0687,"95":6.6825,"96":7.7002,"97":2.5102,"98":-6.9748,"99":-0.1155,"100":9.2069,"101":-3.4809,"102":0.5397,"103":4.0686,"104":-5.4643,"105":-3.1452,"106":7.8935,"107":-0.7097,"108":-2.895,"109":6.5791,"110":-2.245,"111":15.1956,"112":3.1832,"113":4.1395,"114":7.9034,"115":-8.4295,"116":2.8579,"117":-3.9583,"118":-8.7698,"119":-4.9085,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":3.5805,"125":-1.253,"126":-1.8038,"127":3.0352,"128":2.8476,"129":0.6941,"130":-0.658,"131":-5.5483,"132":-6.9527,"133":2.3115,"134":5.6788,"135":0.3122,"136":-1.2078,"137":8.0757,"138":3.5755,"139":-0.4108,"140":-2.4568,"141":-0.9119,"142":-2.5206,"143":4.9101,"144":3.8949,"145":-6.1999,"146":1.5358,"147":0.4923,"148":-2.0497,"149":-6.7371,"150":4.4745,"151":7.9229,"152":0.0836,"153":1.1177,"154":-0.4376,"155":-1.6467,"156":5.6629,"157":4.2619,"158":4.3891,"159":-0.0902,"160":-8.0426,"161":-2.2138,"162":-9.0699,"163":-1.4345,"164":-4.7677,"165":5.6173,"166":-2.7985,"167":-3.1141,"168":6.9311,"169":3.13,"170":-5.7232,"171":6.1484,"172":2.1192,"173":-6.051,"174":-3.4435,"175":-11.0277,"176":11.4065,"177":0.4171,"178":9.6409,"179":-1.324,"180":-10.5012,"181":-2.2476,"182":-0.524,"183":-0.4752,"184":4.8989,"185":13.6282,"186":-4.8338,"187":-8.0039,"188":2.3613,"189":-5.6281,"190":6.2188,"191":-0.2336,"192":3.8559,"193":-11.8999,"194":-2.674,"195":-3.885,"196":-5.0683,"197":4.2147,"198":-8.4483,"199":9.6669,"200":0.9136,"201":-3.3311,"202":-0.7179,"203":-1.0191,"204":1.2294,"205":11.2227,"206":-7.2195,"207":1.1742,"208":6.4773,"209":2.5148,"210":-3.1226,"211":13.3762,"212":7.0291,"213":7.1133,"214":-15.7043,"215":1.7736,"216":0.7509,"217":-8.2719,"218":-3.132,"219":1.5287,"220":3.7015,"221":2.4651,"222":10.1213,"223":1.3537,"224":8.9833,"225":-0.3197,"226":-1.8272,"227":-4.1128,"228":-7.0663,"229":-2.6715,"230":-4.3685,"231":-4.2588,"232":10.0273,"233":-4.1443,"234":-4.7841,"235":6.5248,"236":1.8566,"237":0.6933,"238":11.5532,"239":0.2607,"240":-8.4538,"241":2.4486,"242":-4.3392,"243":1.7533,"244":1.5132,"245":-5.0826,"246":-6.4471,"247":3.0184,"248":8.3158,"249":3.1814,"250":-3.2176,"251":-4.6167,"252":3.7843,"253":-2.9483,"254":-0.9721,"255":-1.9876,"256":8.1683,"257":4.3581,"258":-1.3906,"259":-2.8746,"260":-2.0617,"261":-0.1761,"262":-11.3433,"263":3.6154,"264":6.7931,"265":1.7231,"266":-2.1636,"267":0.868,"268":-0.7791,"269":-3.6016}}';
var trainedGene17 = '{"fitness":10418,"nTrial":0,"gene":{"0":-13.6587,"1":-10.1839,"2":-2.3929,"3":2.6683,"4":1.9833,"5":9.2977,"6":3.7736,"7":4.9884,"8":-1.6674,"9":1.755,"10":0.7214,"11":-4.5014,"12":2.959,"13":-1.6085,"14":4.2934,"15":-0.3581,"16":-3.4817,"17":-8.7166,"18":11.7183,"19":2.1868,"20":-1.1896,"21":4.218,"22":-8.4426,"23":3.5622,"24":1.0516,"25":-4.9969,"26":4.1878,"27":-1.5786,"28":2.8938,"29":1.8448,"30":13.222,"31":2.9911,"32":2.0335,"33":-6.3441,"34":9.0966,"35":3.6539,"36":-14.9874,"37":17.214,"38":3.9074,"39":-5.4725,"40":8.3584,"41":3.9188,"42":-0.4139,"43":-0.1022,"44":3.3043,"45":3.6194,"46":2.2884,"47":1.7924,"48":-2.6588,"49":-0.3438,"50":1.9389,"51":10.6373,"52":-4.6575,"53":-7.3866,"54":5.3928,"55":0.7159,"56":-2.5637,"57":-3.3389,"58":-2.1351,"59":11.7406,"60":8.2083,"61":3.576,"62":-8.7992,"63":-0.8696,"64":-1.3035,"65":-4.5887,"66":-1.757,"67":-1.716,"68":-4.3391,"69":-10.386,"70":2.6364,"71":4.1451,"72":-4.2839,"73":3.2729,"74":4.5623,"75":11.7053,"76":5.8346,"77":-1.2731,"78":-1.4173,"79":4.608,"80":-14.3003,"81":7.4294,"82":4.7903,"83":4.0482,"84":6.7861,"85":-1.402,"86":-6.7149,"87":-4.573,"88":-0.5897,"89":3.3871,"90":4.0597,"91":0.6302,"92":-0.6985,"93":-2.5891,"94":6.8168,"95":3.6068,"96":7.3421,"97":0.8843,"98":-4.8718,"99":2.6979,"100":12.8873,"101":1.2811,"102":0.0472,"103":5.2168,"104":-1.3168,"105":-6.2855,"106":5.5537,"107":-2.1408,"108":-1.6733,"109":5.9376,"110":-3.3287,"111":15.5609,"112":1.7068,"113":2.6183,"114":8.5685,"115":-9.7439,"116":2.4286,"117":0.3281,"118":-8.9597,"119":-3.8357,"120":0.9852,"121":10.1464,"122":2.9095,"123":0.0129,"124":9.6297,"125":0.4861,"126":-2.5996,"127":2.3707,"128":4.7637,"129":-1.0165,"130":1.1879,"131":-5.5968,"132":-10.2156,"133":-0.4314,"134":4.8385,"135":-1.5484,"136":-6.0141,"137":4.047,"138":3.7208,"139":-2.3387,"140":-3.3436,"141":-5.9252,"142":-1.6771,"143":3.6959,"144":-0.4135,"145":-5.6001,"146":4.7824,"147":-1.6951,"148":-0.8987,"149":-7.2969,"150":5.8445,"151":7.3979,"152":0.919,"153":-0.4443,"154":-1.062,"155":-0.4139,"156":-2.827,"157":-0.6697,"158":6.9552,"159":-1.8949,"160":-6.2699,"161":-1.426,"162":-10.9857,"163":1.6221,"164":-6.2095,"165":3.4647,"166":-3.5859,"167":-3.1418,"168":4.5849,"169":0.4048,"170":-1.2552,"171":5.419,"172":3.6005,"173":-5.7766,"174":-0.151,"175":-13.0787,"176":13.862,"177":1.2263,"178":8.0365,"179":3.7863,"180":-9.4653,"181":-3.9801,"182":2.8074,"183":-3.6102,"184":5.1035,"185":13.0114,"186":-4.9694,"187":-7.1435,"188":4.8082,"189":-8.948,"190":5.0432,"191":1.7852,"192":6.07,"193":-12.6129,"194":-5.0827,"195":-6.7407,"196":-4.0389,"197":4.1489,"198":-5.4361,"199":8.2563,"200":0.8655,"201":-5.1095,"202":-1.0341,"203":-0.307,"204":1.1615,"205":10.8287,"206":-3.3846,"207":4.4246,"208":7.6577,"209":1.5095,"210":-4.6336,"211":12.5503,"212":9.8534,"213":6.8801,"214":-16.7953,"215":0.3813,"216":1.1398,"217":-4.4864,"218":3.7866,"219":0.8532,"220":7.2384,"221":1.5245,"222":8.5457,"223":-1.837,"224":8.861,"225":-0.0736,"226":-0.7993,"227":2.9782,"228":-7.1149,"229":-2.3514,"230":-1.3342,"231":-5.4234,"232":9.0492,"233":-3.5264,"234":-7.57,"235":3.2988,"236":2.1957,"237":0.9293,"238":8.4993,"239":-1.9218,"240":-8.9901,"241":2.6875,"242":-1.5725,"243":1.932,"244":2.197,"245":-4.7353,"246":-6.6098,"247":2.1256,"248":9.7371,"249":4.5409,"250":-3.9613,"251":-7.6633,"252":4.8136,"253":-4.3893,"254":-2.235,"255":-3.7574,"256":5.3196,"257":2.3343,"258":-2.9166,"259":-2.628,"260":2.3069,"261":-2.0161,"262":-12.7702,"263":5.448,"264":6.2924,"265":1.519,"266":0.3838,"267":0.3767,"268":-1.1929,"269":-1.8899}}';
var trainedGene18 = '{"fitness":10417,"nTrial":0,"gene":{"0":-13.0132,"1":-9.1874,"2":-1.9422,"3":2.8003,"4":1.9915,"5":11.8071,"6":3.8328,"7":4.2633,"8":-0.676,"9":6.2911,"10":1.9105,"11":-1.8253,"12":2.8813,"13":-5.3804,"14":4.7964,"15":-2.267,"16":-3.6524,"17":-7.7612,"18":10.4116,"19":0.2037,"20":0.2571,"21":1.8243,"22":-7.6127,"23":1.5567,"24":0.9638,"25":-7.1346,"26":2.5006,"27":-1.5129,"28":-0.694,"29":2.0039,"30":14.4879,"31":2.965,"32":2.2219,"33":-3.8483,"34":7.9408,"35":1.9788,"36":-15.6164,"37":11.7726,"38":2.7736,"39":-7.2284,"40":6.2602,"41":1.3181,"42":0.6633,"43":0.4316,"44":1.5731,"45":2.2488,"46":6.7147,"47":-0.5516,"48":-0.4136,"49":0.9872,"50":1.3848,"51":6.0419,"52":-1.6769,"53":-6.1356,"54":7.1143,"55":8.062,"56":-0.6368,"57":-5.0664,"58":-0.7736,"59":11.9459,"60":8.759,"61":-3.4949,"62":-9.6189,"63":-6.3933,"64":-7.5745,"65":-9.3247,"66":-2.8018,"67":-2.095,"68":-2.1038,"69":-9.256,"70":2.7087,"71":7.0037,"72":-2.587,"73":4.0339,"74":5.9334,"75":11.7419,"76":8.9796,"77":4.9635,"78":-2.6711,"79":3.1614,"80":-16.0691,"81":3.3226,"82":6.0116,"83":0.9774,"84":6.0012,"85":-1.0069,"86":-8.7106,"87":-5.8534,"88":-5.066,"89":2.1064,"90":0.5202,"91":3.6779,"92":-2.7523,"93":-4.5321,"94":7.97,"95":6.6825,"96":7.7002,"97":2.5102,"98":-6.9748,"99":0.6245,"100":9.2069,"101":-3.4809,"102":0.5397,"103":4.0686,"104":-5.4643,"105":-3.1452,"106":7.8935,"107":-0.7097,"108":-2.895,"109":6.5791,"110":-2.245,"111":15.1956,"112":3.1832,"113":4.1395,"114":7.9034,"115":-8.6168,"116":2.8579,"117":-3.9583,"118":-8.7698,"119":-4.9085,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":3.5805,"125":-1.2456,"126":-1.8038,"127":3.0352,"128":2.8476,"129":0.6941,"130":-0.2288,"131":-5.5483,"132":-6.9527,"133":2.3115,"134":5.6788,"135":-1.4223,"136":-2.327,"137":7.1371,"138":3.1809,"139":-1.1507,"140":-5.0042,"141":-1.1437,"142":-3.0723,"143":4.9101,"144":1.485,"145":-4.9799,"146":1.5358,"147":0.4923,"148":-1.8088,"149":-9.6443,"150":5.0451,"151":8.6006,"152":2.1168,"153":0.6619,"154":-1.5185,"155":-1.4927,"156":5.4804,"157":6.0055,"158":7.0734,"159":-3.0697,"160":-5.7745,"161":-1.5022,"162":-10.0924,"163":0.3021,"164":-3.4687,"165":4.1882,"166":-3.596,"167":-2.8029,"168":4.7628,"169":2.0507,"170":-4.1048,"171":5.5682,"172":1.4795,"173":-2.2447,"174":-2.3243,"175":-11.0277,"176":10.3655,"177":0.8609,"178":10.1374,"179":-1.4008,"180":-8.8506,"181":-3.0214,"182":-0.524,"183":-3.7163,"184":5.1913,"185":15.0605,"186":-4.2182,"187":-8.0039,"188":4.0164,"189":-5.6281,"190":9.9087,"191":1.2238,"192":4.2974,"193":-13.7234,"194":-3.5271,"195":-3.352,"196":-3.9764,"197":5.6793,"198":-8.4338,"199":9.3018,"200":0.9136,"201":-2.4352,"202":-0.8429,"203":-1.6544,"204":1.6015,"205":9.5707,"206":-6.0387,"207":2.5732,"208":6.3798,"209":4.0918,"210":-3.0784,"211":13.0865,"212":7.5481,"213":7.3664,"214":-18.4104,"215":0.4919,"216":2.2059,"217":-4.804,"218":-1.0187,"219":0.3987,"220":4.7231,"221":3.4155,"222":10.0517,"223":-2.4593,"224":12.7052,"225":-0.8817,"226":-1.4408,"227":1.4058,"228":-7.0652,"229":-4.8976,"230":-1.1689,"231":-2.959,"232":10.3938,"233":-3.1957,"234":-4.7841,"235":5.1424,"236":1.8566,"237":-0.0282,"238":11.5532,"239":0.2607,"240":-8.4538,"241":2.5881,"242":-3.4587,"243":1.7533,"244":1.5132,"245":-5.0826,"246":-5.8948,"247":3.0184,"248":8.3158,"249":4.0324,"250":-3.2176,"251":-4.2239,"252":3.7843,"253":-2.9483,"254":-2.5809,"255":-1.9876,"256":7.356,"257":4.3581,"258":-1.3906,"259":-2.8746,"260":-2.0617,"261":-0.1761,"262":-11.3433,"263":4.4046,"264":6.7931,"265":2.0871,"266":-3.0741,"267":0.868,"268":-2.947,"269":-3.6016}}';
var trainedGene19 = '{"fitness":10299,"nTrial":0,"gene":{"0":-11.4618,"1":-8.8237,"2":-1.4516,"3":1.6683,"4":4.1442,"5":8.6749,"6":6.8586,"7":2.8565,"8":-3.0297,"9":2.4628,"10":0.1065,"11":-5.6937,"12":2.5867,"13":-4.5467,"14":4.1778,"15":-2.4782,"16":-3.577,"17":-7.6437,"18":10.8352,"19":1.7568,"20":-1.7782,"21":1.9122,"22":-8.2154,"23":1.4595,"24":0.4762,"25":-1.9264,"26":3.159,"27":2.0024,"28":0.7825,"29":2.9707,"30":13.1423,"31":2.9911,"32":2.0335,"33":-6.3441,"34":9.0966,"35":3.6539,"36":-16.4809,"37":17.214,"38":3.9074,"39":-6.404,"40":8.9062,"41":3.9188,"42":-0.4139,"43":-0.1022,"44":3.3043,"45":5.3088,"46":0.2856,"47":1.4593,"48":-2.6588,"49":-0.3438,"50":1.8406,"51":10.1361,"52":-4.5308,"53":-7.3866,"54":5.2423,"55":2.6169,"56":-4.6671,"57":-3.9366,"58":-1.3977,"59":10.213,"60":8.0361,"61":4.0966,"62":-8.7992,"63":-3.2538,"64":0.8204,"65":-4.5248,"66":-1.757,"67":-2.637,"68":-3.5867,"69":-10.6743,"70":3.3622,"71":4.9036,"72":-4.2839,"73":3.459,"74":3.7186,"75":10.6478,"76":5.5035,"77":2.8129,"78":-4.2569,"79":3.7774,"80":-14.8471,"81":4.7517,"82":4.0599,"83":5.7656,"84":4.0298,"85":-0.7607,"86":-3.0817,"87":-4.5645,"88":-2.6691,"89":7.2686,"90":1.6162,"91":2.6778,"92":-2.8422,"93":0.974,"94":6.1511,"95":5.9789,"96":5.935,"97":0.2453,"98":0.7334,"99":1.6501,"100":15.363,"101":-2.4024,"102":0.8142,"103":4.27,"104":-1.2367,"105":-5.0028,"106":9.6411,"107":-2.7811,"108":-2.0399,"109":5.9376,"110":-0.9809,"111":15.5609,"112":1.7068,"113":2.6183,"114":8.5685,"115":-9.7439,"116":2.8348,"117":-0.728,"118":-9.3839,"119":-5.3629,"120":3.8744,"121":5.5437,"122":4.0173,"123":0.0129,"124":9.6297,"125":-0.6291,"126":-1.2443,"127":2.3707,"128":4.4856,"129":1.0415,"130":1.1879,"131":-4.9334,"132":-9.5898,"133":-0.6688,"134":5.5307,"135":-1.5484,"136":-6.2444,"137":3.1996,"138":4.6516,"139":-0.8302,"140":-3.3436,"141":-5.8125,"142":-1.6771,"143":3.5611,"144":-1.1332,"145":-5.6001,"146":3.2506,"147":-1.6781,"148":0.0281,"149":-6.1424,"150":4.6757,"151":6.3324,"152":1.0634,"153":-0.4443,"154":-3.1165,"155":-0.4139,"156":-0.3456,"157":-0.6697,"158":6.9552,"159":-1.8949,"160":-4.6414,"161":-2.7495,"162":-8.8962,"163":-0.5415,"164":-2.6418,"165":3.5939,"166":-3.7197,"167":-2.5486,"168":5.6099,"169":-0.3499,"170":-4.7897,"171":3.0016,"172":6.5917,"173":-9.6952,"174":0.2261,"175":-11.2523,"176":10.7048,"177":1.2263,"178":7.9465,"179":-1.1134,"180":-8.0257,"181":-2.4429,"182":1.3332,"183":-4.1244,"184":3.6907,"185":16.1714,"186":-4.429,"187":-6.9158,"188":2.827,"189":-5.688,"190":6.3118,"191":3.6701,"192":6.07,"193":-11.6168,"194":-5.2336,"195":-3.8772,"196":-5.345,"197":3.1782,"198":-9.6207,"199":8.2563,"200":2.2562,"201":-4.863,"202":-1.7104,"203":-1.837,"204":3.6871,"205":10.8287,"206":-5.2621,"207":3.6638,"208":4.8395,"209":1.3574,"210":-3.2133,"211":12.5092,"212":11.5337,"213":9.4745,"214":-13.55,"215":2.8034,"216":2.4148,"217":-5.1281,"218":1.267,"219":2.4445,"220":6.0912,"221":0.6686,"222":9.5761,"223":-0.5062,"224":8.5006,"225":3.0271,"226":-0.4211,"227":0.6743,"228":-2.0638,"229":-3.3228,"230":-0.999,"231":-4.1314,"232":9.0809,"233":-1.1001,"234":-4.2366,"235":6.4859,"236":0.439,"237":0.3677,"238":8.7045,"239":0.8615,"240":-9.2956,"241":2.1749,"242":-3.9195,"243":2.5966,"244":2.6662,"245":-3.4419,"246":-7.27,"247":0.8398,"248":8.8352,"249":4.5409,"250":-4.0511,"251":-5.6745,"252":5.8374,"253":-4.3893,"254":-3.6352,"255":-3.2909,"256":5.3196,"257":4.8259,"258":-1.3021,"259":-2.9349,"260":-1.4201,"261":-0.6719,"262":-10.9556,"263":4.5034,"264":5.2196,"265":3.0195,"266":0.2074,"267":3.5064,"268":-0.8069,"269":-2.8603}}';
var trainedGene20 = '{"fitness":10259,"nTrial":0,"gene":{"0":-13.4191,"1":-9.3768,"2":-1.9422,"3":3.206,"4":4.4213,"5":10.1527,"6":3.8328,"7":5.7354,"8":-0.8673,"9":6.2911,"10":0.6479,"11":-2.5816,"12":2.8813,"13":-5.6688,"14":3.8655,"15":-2.7527,"16":-3.6022,"17":-7.7612,"18":10.4116,"19":0.7575,"20":0.2571,"21":2.8195,"22":-7.9593,"23":3.5039,"24":0.9638,"25":-4.8649,"26":3.2413,"27":2.7121,"28":-0.694,"29":1.7755,"30":12.7422,"31":2.965,"32":2.2219,"33":-6.6507,"34":7.7704,"35":1.9788,"36":-16.3289,"37":14.0136,"38":4.3194,"39":-7.2284,"40":6.2255,"41":0.721,"42":2.5016,"43":0.4316,"44":1.909,"45":1.4893,"46":2.9438,"47":-0.5516,"48":-3.3555,"49":0.3217,"50":2.4746,"51":7.9418,"52":-2.1371,"53":-5.4337,"54":7.1143,"55":7.3314,"56":-0.0706,"57":-5.9945,"58":-2.8629,"59":13.7128,"60":7.6372,"61":-2.122,"62":-10.9026,"63":-5.2862,"64":-5.1404,"65":-7.3349,"66":-1.3076,"67":-2.5778,"68":-0.2157,"69":-9.6315,"70":4.1331,"71":4.1799,"72":-2.8737,"73":5.697,"74":4.9626,"75":11.5037,"76":5.598,"77":3.7117,"78":-2.7505,"79":3.2305,"80":-15.0746,"81":6.6593,"82":4.7899,"83":3.8663,"84":3.4282,"85":-1.8218,"86":-5.2198,"87":-5.1783,"88":-3.6779,"89":4.2063,"90":4.4153,"91":0.3235,"92":-0.2451,"93":-1.1188,"94":6.3511,"95":6.4216,"96":3.6664,"97":1.4685,"98":-2.1768,"99":3.2134,"100":10.8802,"101":0.7919,"102":0.9164,"103":5.0194,"104":-1.4916,"105":-1.743,"106":7.8935,"107":-3.8583,"108":-2.1329,"109":5.558,"110":0.4105,"111":14.599,"112":1.0967,"113":2.4633,"114":8.1799,"115":-9.7193,"116":1.5078,"117":0.1653,"118":-9.6562,"119":-4.234,"120":3.7587,"121":9.7307,"122":2.0309,"123":1.1198,"124":5.1372,"125":-1.2456,"126":-1.8038,"127":2.8703,"128":2.9801,"129":0.6941,"130":-0.2288,"131":-5.5483,"132":-9.0527,"133":-0.9999,"134":6.296,"135":0.8687,"136":-2.9856,"137":7.1371,"138":3.1809,"139":-0.9513,"140":-4.4099,"141":-1.5099,"142":-3.0723,"143":4.9101,"144":3.2155,"145":-4.9799,"146":1.5358,"147":0.4923,"148":-1.8088,"149":-9.4932,"150":4.8329,"151":8.6006,"152":2.7924,"153":1.8827,"154":-1.5185,"155":-1.4927,"156":5.4804,"157":4.8612,"158":6.3889,"159":-3.0697,"160":-5.7745,"161":-0.383,"162":-10.0924,"163":0.3021,"164":-4.6991,"165":3.891,"166":-3.0362,"167":-2.8029,"168":4.7628,"169":2.0507,"170":-4.1048,"171":5.5682,"172":1.4795,"173":-5.9497,"174":-2.3243,"175":-11.0277,"176":10.3655,"177":0.8609,"178":9.3688,"179":-0.2061,"180":-8.8506,"181":-3.3594,"182":-0.524,"183":-3.3117,"184":4.8989,"185":15.0605,"186":-4.2182,"187":-8.0039,"188":3.7976,"189":-5.6281,"190":6.2188,"191":2.425,"192":3.1864,"193":-11.9207,"194":-3.5271,"195":-3.352,"196":-5.0683,"197":5.7841,"198":-9.0006,"199":9.3018,"200":0.9136,"201":-3.3311,"202":-0.5373,"203":-1.6544,"204":1.6015,"205":10.2693,"206":-6.7958,"207":2.5732,"208":6.4773,"209":3.3571,"210":-3.0784,"211":12.1667,"212":7.5481,"213":7.0582,"214":-17.9455,"215":0.4919,"216":2.2059,"217":-4.804,"218":-1.0187,"219":1.7379,"220":4.7231,"221":2.6897,"222":10.0517,"223":-2.4593,"224":12.7052,"225":0.4419,"226":-0.8715,"227":1.673,"228":-7.0652,"229":-3.7988,"230":-1.1689,"231":-4.7589,"232":9.7121,"233":-4.3958,"234":-6.3582,"235":5.1424,"236":1.8566,"237":-0.0282,"238":9.7222,"239":0.7282,"240":-8.4538,"241":2.5881,"242":-5.3208,"243":1.7533,"244":1.5132,"245":-5.0826,"246":-5.8948,"247":3.3382,"248":8.3158,"249":4.0324,"250":-3.2176,"251":-4.2239,"252":5.5522,"253":-2.9483,"254":-1.406,"255":-1.9876,"256":5.2998,"257":4.3083,"258":-1.7079,"259":-2.8746,"260":-1.6638,"261":0.8021,"262":-10.858,"263":4.5712,"264":7.118,"265":2.0871,"266":-3.0741,"267":0.1784,"268":-1.1472,"269":-3.6016}}';
var trainedGene21 = '{"fitness":10255,"nTrial":0,"gene":{"0":-14.4447,"1":-10.5121,"2":-1.7098,"3":2.8003,"4":1.9915,"5":11.7102,"6":3.8328,"7":4.2633,"8":-0.676,"9":6.2911,"10":1.0118,"11":-2.5816,"12":2.8813,"13":-7.1594,"14":2.5443,"15":-1.6177,"16":-3.8541,"17":-7.7612,"18":10.6877,"19":0.2037,"20":0.2571,"21":3.9892,"22":-9.9573,"23":2.3978,"24":-0.3849,"25":-8.9483,"26":3.1957,"27":-1.5129,"28":-0.694,"29":2.0039,"30":15.8465,"31":1.7812,"32":2.2219,"33":-4.0028,"34":8.5998,"35":1.9788,"36":-15.6164,"37":12.0215,"38":1.7068,"39":-7.2284,"40":6.2602,"41":0.6012,"42":1.2188,"43":-0.9992,"44":1.5142,"45":2.5226,"46":5.6386,"47":-0.5516,"48":-1.3328,"49":3.2883,"50":1.3848,"51":4.1991,"52":-2.0301,"53":-4.1416,"54":7.1143,"55":9.7933,"56":-1.1529,"57":-6.5392,"58":-1.842,"59":12.9359,"60":5.7304,"61":-0.8487,"62":-12.5653,"63":-1.7069,"64":-4.0094,"65":-5.612,"66":-2.7878,"67":-4.0573,"68":0.5596,"69":-9.4956,"70":0.9254,"71":5.4674,"72":-2.3195,"73":6.3094,"74":6.8579,"75":9.8591,"76":6.4407,"77":3.8448,"78":-1.1046,"79":3.1714,"80":-16.7272,"81":3.4976,"82":5.4374,"83":4.1018,"84":6.3599,"85":-1.7473,"86":-8.7832,"87":-3.7994,"88":-2.4441,"89":4.5442,"90":7.7421,"91":-5.7671,"92":-0.6683,"93":-2.8816,"94":6.605,"95":4.5881,"96":8.4123,"97":1.2978,"98":-7.7304,"99":2.1438,"100":9.0596,"101":-0.5143,"102":0.7022,"103":5.3331,"104":-1.2816,"105":0.8263,"106":6.961,"107":-3.8573,"108":-3.4597,"109":6.5791,"110":-2.245,"111":15.1956,"112":0.8461,"113":2.5076,"114":8.7401,"115":-8.6168,"116":4.0028,"117":-3.0123,"118":-9.9944,"119":-3.1562,"120":4.6907,"121":10.0452,"122":3.3665,"123":1.1198,"124":4.8111,"125":-1.2456,"126":-2.8117,"127":2.1715,"128":2.9801,"129":0.6941,"130":0.2098,"131":-5.5483,"132":-8.3472,"133":-1.2958,"134":7.6175,"135":0.8687,"136":-2.7304,"137":5.311,"138":3.2084,"139":-1.3439,"140":-4.9691,"141":-1.1437,"142":-3.1614,"143":5.5551,"144":1.485,"145":-3.1472,"146":1.5358,"147":1.2974,"148":-3.2856,"149":-8.629,"150":5.8506,"151":8.6006,"152":1.6248,"153":0.5991,"154":-4.0825,"155":-2.1951,"156":4.4631,"157":6.0055,"158":7.0734,"159":-3.0697,"160":-4.823,"161":-3.382,"162":-11.0659,"163":0.3021,"164":-4.365,"165":4.7475,"166":-3.596,"167":-2.3293,"168":3.7085,"169":2.0507,"170":-4.9074,"171":5.5682,"172":2.2858,"173":-2.7108,"174":-1.8344,"175":-11.0277,"176":10.3655,"177":-0.7573,"178":10.1374,"179":-2.1581,"180":-8.5726,"181":-3.0214,"182":-0.9691,"183":-5.3426,"184":3.5795,"185":13.8702,"186":-5.7985,"187":-8.0039,"188":4.0164,"189":-4.902,"190":10.7286,"191":1.2238,"192":3.8714,"193":-12.2954,"194":-3.7123,"195":-3.352,"196":-3.9764,"197":6.4554,"198":-9.2184,"199":9.0344,"200":0.9136,"201":-2.4986,"202":-0.8429,"203":-0.9608,"204":1.6015,"205":10.3184,"206":-6.0883,"207":2.5405,"208":6.1707,"209":4.7193,"210":-3.0784,"211":11.9712,"212":7.5726,"213":7.4371,"214":-19.0491,"215":-0.6134,"216":3.6526,"217":-5.5712,"218":-1.0187,"219":0.3987,"220":4.7231,"221":1.8165,"222":10.8451,"223":-2.8371,"224":12.7052,"225":0.4419,"226":-0.8715,"227":1.673,"228":-6.3496,"229":-3.7048,"230":-1.1689,"231":-3.6708,"232":9.7121,"233":-4.4274,"234":-6.3582,"235":5.1424,"236":1.8566,"237":-0.0282,"238":10.1046,"239":0.7282,"240":-8.4538,"241":2.5881,"242":-5.3208,"243":1.7533,"244":1.5132,"245":-6.08,"246":-5.8948,"247":3.0184,"248":8.3158,"249":3.8547,"250":-3.0471,"251":-4.2239,"252":3.7843,"253":-3.3798,"254":-2.5809,"255":-1.9876,"256":8.1683,"257":4.3581,"258":-1.3906,"259":-2.8746,"260":-2.0617,"261":-0.1761,"262":-11.3433,"263":3.6154,"264":7.6116,"265":1.7231,"266":-1.9081,"267":0.868,"268":-2.947,"269":-2.5125}}';
var trainedGene22 = '{"fitness":10210,"nTrial":0,"gene":{"0":-13.4191,"1":-9.3768,"2":-1.9422,"3":3.206,"4":4.4213,"5":10.1527,"6":3.8328,"7":5.7354,"8":-0.8673,"9":6.2911,"10":0.6479,"11":-2.5816,"12":2.8813,"13":-5.6688,"14":3.8655,"15":-2.7527,"16":-3.6022,"17":-7.7612,"18":10.4116,"19":0.7575,"20":0.2571,"21":2.8195,"22":-7.9593,"23":3.5039,"24":0.9638,"25":-4.8649,"26":3.2413,"27":2.7121,"28":-0.694,"29":1.7755,"30":12.7422,"31":2.965,"32":2.2219,"33":-6.6507,"34":7.7704,"35":1.9788,"36":-16.3289,"37":14.0136,"38":4.3194,"39":-7.2284,"40":6.2255,"41":0.721,"42":2.5016,"43":0.4316,"44":1.909,"45":1.4893,"46":2.9438,"47":-0.5516,"48":-3.3555,"49":0.3217,"50":2.4746,"51":7.9418,"52":-2.1371,"53":-5.4337,"54":7.1143,"55":7.3314,"56":-0.0706,"57":-5.9945,"58":-2.8629,"59":13.7128,"60":7.6372,"61":-2.122,"62":-10.9026,"63":-5.2862,"64":-5.1404,"65":-7.3349,"66":-1.3076,"67":-2.5778,"68":-0.2157,"69":-9.6315,"70":4.1331,"71":4.1799,"72":-2.8737,"73":5.697,"74":4.9626,"75":11.5037,"76":5.598,"77":3.7117,"78":-2.7505,"79":3.2305,"80":-15.0746,"81":6.6593,"82":4.7899,"83":3.8663,"84":3.4282,"85":-1.8218,"86":-5.2198,"87":-5.1783,"88":-3.6779,"89":4.2063,"90":4.4153,"91":0.3235,"92":-0.2451,"93":-1.1188,"94":6.3511,"95":6.4216,"96":3.6664,"97":1.4685,"98":-2.1768,"99":3.2134,"100":10.8802,"101":0.7919,"102":0.9164,"103":5.0194,"104":-1.4916,"105":-1.743,"106":7.8935,"107":-3.8583,"108":-2.1329,"109":5.558,"110":0.4105,"111":14.599,"112":1.0967,"113":2.4633,"114":8.1799,"115":-9.7193,"116":1.5078,"117":0.1653,"118":-9.6562,"119":-4.234,"120":3.7587,"121":9.7307,"122":2.0309,"123":1.1198,"124":5.1372,"125":-1.2456,"126":-1.8038,"127":2.8703,"128":2.9801,"129":0.6941,"130":-0.2288,"131":-5.5483,"132":-9.0527,"133":-0.9999,"134":6.296,"135":0.8687,"136":-2.9856,"137":7.1371,"138":3.1809,"139":-0.9513,"140":-4.4099,"141":-1.5099,"142":-3.0723,"143":4.9101,"144":3.2155,"145":-4.9799,"146":1.5358,"147":0.4923,"148":-1.8088,"149":-9.4932,"150":4.8329,"151":8.6006,"152":2.7924,"153":1.8827,"154":-1.5185,"155":-1.4927,"156":5.4804,"157":4.8612,"158":6.3889,"159":-3.0697,"160":-5.7745,"161":-0.383,"162":-10.0924,"163":0.3021,"164":-4.6991,"165":3.891,"166":-3.0362,"167":-2.8029,"168":4.7628,"169":2.0507,"170":-4.1048,"171":5.5682,"172":1.4795,"173":-5.9497,"174":-2.3243,"175":-11.0277,"176":10.3655,"177":0.8609,"178":9.3688,"179":-0.2061,"180":-8.8506,"181":-3.3594,"182":-0.524,"183":-3.3117,"184":4.8989,"185":15.0605,"186":-4.2182,"187":-8.0039,"188":3.7976,"189":-5.6281,"190":6.2188,"191":2.425,"192":3.1864,"193":-11.9207,"194":-3.5271,"195":-3.352,"196":-5.0683,"197":5.7841,"198":-9.0006,"199":9.3018,"200":0.9136,"201":-3.3311,"202":-0.5373,"203":-1.6544,"204":1.6015,"205":10.2693,"206":-6.7958,"207":2.5732,"208":6.4773,"209":3.3571,"210":-3.0784,"211":12.1667,"212":7.5481,"213":7.0582,"214":-17.9455,"215":0.4919,"216":2.2059,"217":-4.804,"218":-1.0187,"219":1.7379,"220":4.7231,"221":2.6897,"222":10.0517,"223":-2.4593,"224":12.7052,"225":0.4419,"226":-0.8715,"227":1.673,"228":-7.0652,"229":-3.7988,"230":-1.1689,"231":-4.7589,"232":9.7121,"233":-4.3958,"234":-6.3582,"235":5.1424,"236":1.8566,"237":-0.0282,"238":9.7222,"239":0.7282,"240":-8.4538,"241":2.5881,"242":-5.3208,"243":1.7533,"244":1.5132,"245":-5.0826,"246":-5.8948,"247":3.3382,"248":8.3158,"249":4.0324,"250":-3.2176,"251":-4.2239,"252":5.5522,"253":-2.9483,"254":-1.406,"255":-1.9876,"256":5.2998,"257":4.3083,"258":-1.7079,"259":-2.8746,"260":-1.6638,"261":0.8021,"262":-10.858,"263":4.5712,"264":7.118,"265":2.0871,"266":-3.0741,"267":0.1784,"268":-1.1472,"269":-3.6016}}';



initGenes.push(parseGene(trainedGene11));
initGenes.push(parseGene(trainedGene12));
initGenes.push(parseGene(trainedGene13));
initGenes.push(parseGene(trainedGene14));
initGenes.push(parseGene(trainedGene15));
initGenes.push(parseGene(trainedGene16));
initGenes.push(parseGene(trainedGene17));
initGenes.push(parseGene(trainedGene18));
initGenes.push(parseGene(trainedGene19));
initGenes.push(parseGene(trainedGene20));
initGenes.push(parseGene(trainedGene21));
initGenes.push(parseGene(trainedGene22));

initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene00));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene01));
initGenes.push(parseGene(trainedGene02));
initGenes.push(parseGene(trainedGene02));
initGenes.push(parseGene(trainedGene02));
initGenes.push(parseGene(trainedGene02));
initGenes.push(parseGene(trainedGene03));
initGenes.push(parseGene(trainedGene03));
initGenes.push(parseGene(trainedGene03));
initGenes.push(parseGene(trainedGene03));
initGenes.push(parseGene(trainedGene04));
initGenes.push(parseGene(trainedGene04));
initGenes.push(parseGene(trainedGene04));
initGenes.push(parseGene(trainedGene05));
initGenes.push(parseGene(trainedGene05));
initGenes.push(parseGene(trainedGene05));
initGenes.push(parseGene(trainedGene06));
initGenes.push(parseGene(trainedGene06));
initGenes.push(parseGene(trainedGene07));
initGenes.push(parseGene(trainedGene07));
initGenes.push(parseGene(trainedGene08));
initGenes.push(parseGene(trainedGene08));
initGenes.push(parseGene(trainedGene09));
initGenes.push(parseGene(trainedGene09));
initGenes.push(parseGene(trainedGene10));
initGenes.push(parseGene(trainedGene10));



// simulation variables:
var ref_factor = 1.0;
var nFrame = 0;
var nIdentifier = 0;
var nCount = 0;
var nGeneration = 0;
var bestGen = 0; // current generation


// perception offset variables:
var wallPerceptionOffset = 0.5;
var boidPerceptionOffset = 0.0;
var wallPerceptionDecay = 0.5;
var boidPerceptionDecay = 0.5;

// html stuff and canvas
var myCanvas;
var md;
var mobileMode = false;
$("#pageImage").hide();

function printBestGenes() {
  var i;
  for (i = 0; i < 10; i++) {
    $("#nn_weights"+i).text(JSON.stringify(trainer.getBestChromosome(i)));
  }
}

function toggleDisplayState(displayState_) {
  if (displayState_ || displayState_ >= 0) {
    displayState = displayState_;
  }
  if (displayState === 0) {
    detailedMode = false;
    drawPerceptionRods = true;
    drawDirectionWheel = true;
  } else if (displayState === 1) {
    detailedMode = false;
    drawPerceptionRods = false;
    drawDirectionWheel = false;
  } else if (displayState === 2) {
    detailedMode = true;
    drawPerceptionRods = false;
    drawDirectionWheel = false;
  } else if (displayState === 3) {
    detailedMode = true;
    drawPerceptionRods = false;
    drawDirectionWheel = true;
  } else if (displayState === 4) {
    detailedMode = true;
    drawPerceptionRods = true;
    drawDirectionWheel = false;
  } else if (displayState === 5) {
    detailedMode = true;
    drawPerceptionRods = true;
    drawDirectionWheel = true;
  }
  displayState = (displayState + 1) % 6;
}
toggleDisplayState();

var ghostLife = theFrameRate;
var babyLife = theFrameRate;

var pNoiseSeed = 0;

function nextNoise(pNoiseSeed, pFactor_) {
  var pFactor = pFactor_ || 1000;
  var f = 2;
  pNoiseSeed = pNoiseSeed || 0;
  pNoiseSeed += 1;
  return (noise(pNoiseSeed / pFactor)-0.5)*f;
}

// init gene stuff

function parseGene(initGeneJSON) {
  var initGeneRaw = JSON.parse(initGeneJSON);

  var initGene = convnetjs.zeros(Object.keys(initGeneRaw.gene).length); // Float64 faster.

  for (var i = 0; i < initGene.length; i++) {
    initGene[i] = initGeneRaw.gene[i];
  }
  return initGene;
}



function setInitGene(i) {
  initGene = initGenes[i];
  if (!loadPretrainedGene) {
	initGene = null;
  }
}


if (hideJSONweights) {
  for (var i = 0; i < 10; i++) {
    $("#nn_weights"+i).hide();
  }
}

function w2p(x) {
  return x * ref_factor;
}

function p2w(x) {
  return x / ref_factor;
}

// global objects:

// A list of boids
var boids = [];
var walls = [];

// obstacle to push boids away
var obstacle = {
	x: 0,
	y: 0,
	r: 16.0,
	forceFactor: 1,
	life: 0,
	fullLife: 16,
	active: false
};

// useful helper functions:
var cosTable = new Array(360);
var sinTable = new Array(360);
var i;
// pre compute sine and cosine values to the nearest degree
for (i = 0; i < 360; i++) {
  cosTable[i] = Math.cos((i / 360) * 2 * Math.PI);
  sinTable[i] = Math.sin((i / 360) * 2 * Math.PI);
}

var fastSin = function (xDeg) {
  var deg = Math.round(xDeg);
  if (deg >= 0) {
    return sinTable[(deg % 360)];
  }
  return -sinTable[((-deg) % 360)];
};
var fastCos = function (xDeg) {
  var deg = Math.round(Math.abs(xDeg));
  return cosTable[deg % 360];
};

var getRandom = function (min, max) {
  return Math.random() * (max - min) + min;
};

var getRandomInt = function (min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
};

var getUniqueID = function() {
  nIdentifier++;
  return nIdentifier;
};

var getCount = function() {
  nCount++;
  return nCount;
};

// Array utilities
var zeros = function(n) {
  "use strict";
  if(typeof(n)==='undefined' || isNaN(n)) { return []; }
  if(typeof ArrayBuffer === 'undefined') {
    // lacking browser support
    var arr = new Array(n);
    for(var i=0;i<n;i++) { arr[i]= 0; }
    return arr;
  } else {
    return new Float64Array(n);
  }
};

// optimised intersection code

function sameSign(a,  b) {
  return (( a * b) >= 0);
}

// check for line-circle intersection
function intersectLineCircle( x1,  y1,  x2,  y2,  cx,  cy,  r) {
  "use strict";
  var sqR = r*r;
  //Check if segment extremes are inside the circle
  var oneInside = (cx-x1)*(cx-x1)+(cy-y1)*(cy-y1) < sqR;
  var twoInside = (cx-x2)*(cx-x2)+(cy-y2)*(cy-y2) < sqR;

  //If segment is inside the circle there is no intersection
  if (oneInside && twoInside) return null;

  //Get a normalized vector (sx, sy) in the direction of the segment and its magnitude (sLength)
  var dx = x2-x1;
  var dy = y2-y1; 
  var sLength = Math.sqrt(dx*dx + dy*dy);
  var sx = dx/sLength;
  var sy = dy/sLength;

  //Calculate the length of the projected line (pLength) connecting the origin
  // of the segment (x1, y1) to the center of the circle (cx, cy) using dot product
  var pLength = (cx-x1)*sx + (cy-y1)*sy;

  //Check if closest point in the segment is one of the segment extremes and if there is intersection in that case
  if ((pLength < 0 && !oneInside) || (pLength > sLength && !twoInside)) return null;

  //Else, closest point is between both extremes
  //If distance from this point to center is bigger than radius there is no intersection
  var x = x1 + sx * pLength;
  var y = y1 + sy * pLength;
  var d = sqR - ((x-cx)*(x-cx) + (y-cy)*(y-cy));
  if (d < 0) return null;

  //Calculate distance from this point to intersection points (applying Pythagoras theorem)
  d = Math.sqrt(d);
  //Calculate intersection points
  var result = [];
  if (oneInside) {
    result.push(createVector(x+sx*d, y+sy*d));
    return result;
  }

  if (twoInside) {
    result.push(createVector(x-sx*d, y-sy*d));
    return result;
  }

  result.push(createVector(x+sx*d, y+sy*d));
  result.push(createVector(x-sx*d, y-sy*d));

  return result;

}

// check for line-line intersection
function intersectLineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
  "use strict";
  var a1, a2, b1, b2, c1, c2;
  var r1, r2, r3, r4;
  var denom, num;
  var x, y;
  x = 0;
  y = 0;

  var result = null;

  a1 = y2 - y1;

  b1 = x1 - x2;
  c1 = (x2 * y1) - (x1 * y2);

  r3 = ((a1 * x3) + (b1 * y3) + c1);
  r4 = ((a1 * x4) + (b1 * y4) + c1);

  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {
    return result;
  }

  a2 = y4 - y3;
  b2 = x3 - x4;
  c2 = (x4 * y3) - (x3 * y4);

  r1 = (a2 * x1) + (b2 * y1) + c2;
  r2 = (a2 * x2) + (b2 * y2) + c2;

  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {
    return result;
  }

  denom = (a1 * b2) - (a2 * b1);

  if (denom === 0) {
    return result;
  }

  num = (b1 * c2) - (b2 * c1);
  x = (num) / denom;

  num = (a2 * c1) - (a1 * c2);
  y = (num) / denom;

  result = createVector(x, y);

  return result;
}

// returns the square of distance of two p5 vectors.  fast.
function dist2(p1, p2) {
  var dx = p2.x - p1.x;
  var dy = p2.y - p1.y;
  return (dx*dx+dy*dy);
}

// return a dead boid's index, if any.  otherwise return -1
function getDeadBoidIndex() {
  var i;
  for (i = boids.length-1; i >= 0 ; i--) {
    if (!boids[i].isAlive) {
      return i;
    }
  }
  return -1; // every boid is alive.
}

// return the total number of dead boids
function getNumDeadBoids() {
  var i;
  var nDead = 0;
  for (i = boids.length-1; i >= 0 ; i--) {
    if (!boids[i].isAlive) {
      nDead++;
    }
  }
  return nDead;
}

// wall object

var Wall = function(s_) {
  "use strict";
  var s = s_ || {
    x1: 0,
    x2: 0,
    y1: 0,
    y2: 0,
    vx: 0,
    vy: 0
  };
  this.p1 = createVector(s.x1 || 0, s.y1 || 0);
  this.p2 = createVector(s.x2 || ref_w, s.y2 || 0);
  this.velocity = createVector(s.vx || 0, s.vy || 0);
  this.isAlive = true;
  this.c = color(64, 127);
  this.gid = getUniqueID();
  this.isPerceptionRod = false;

  // for detailed mode
  this.bodyAlpha = random(0.15*255, 0.3*255);
  var lowColor = 200;
  this.bodyRed = random(lowColor, 255);
  this.bodyGreen = random(lowColor, 255);
  this.bodyBlue = random(lowColor, 255);
  this.bodyColor = color(this.bodyRed, this.bodyGreen, this.bodyBlue, this.bodyAlpha);
  this.seed = getRandomInt(0, 180);
  this.seedFactor = getRandomInt(500, 1000);
};

Wall.prototype = {

  // Method to update location
  update: function() {
    "use strict";
    this.p1.add(this.velocity);
    this.p2.add(this.velocity);
  },

  intersectWall: function(that) {
    "use strict";
    return intersectLineLine(this.p2.x, this.p2.y, this.p1.x, this.p1.y, that.p1.x, that.p1.y, that.p2.x, that.p2.y);
  },

  intersectBoid: function(that) {
    "use strict";
    return intersectLineCircle(this.p2.x, this.p2.y, this.p1.x, this.p1.y, that.position.x, that.position.y, that.r);
  },

  intersectCircle: function(x, y, r) {
    "use strict";
    return intersectLineCircle(this.p2.x, this.p2.y, this.p1.x, this.p1.y, x, y, r);
  },

  distClosestWall: function(walls, r) { // returns coordinate of distance of intersection (if any) from p1
    var i;
    var bestD2 = ref_w*ref_w+ref_h*ref_h;
    var d2;
    var loc;
    var loc2; // this makes one more layer of perception. see if wall is close to a circle near the stem.
    var w;
    var found = false;
    var result = 0;
    for (i = walls.length-1; i>=0; i--) {
      w = walls[i];
      if (w.isAlive && (w.gid !== this.gid)) {
        loc = this.intersectWall(w);
        if (loc) {
          d2 = dist2(this.p1, loc);
          if (d2 < bestD2) {
            bestD2 = d2;
            found = true;
          }
        }

        // second backup perception
        loc2 = w.intersectCircle(this.p1.x, this.p1.y, r);
        if (loc2) {
          d2 = (r*r);
          if (d2 < bestD2) {
            bestD2 = d2;
            found = true;
          }
        }

        // third backup perception
        loc2 = w.intersectCircle(this.p1.x, this.p1.y, r*2);
        if (loc2) {
          d2 = (r*r*4);
          if (d2 < bestD2) {
            bestD2 = d2;
            found = true;
          }
        }

      }
    }
    if (found) {
      result = Math.sqrt(bestD2);
    }
    return result;
  },

  distClosestBoid: function(boids, gid) { // returns coordinate of distance of intersection (if any) from p1
    var i, j;
    var bestD2 = ref_w*ref_w+ref_h*ref_h;
    var d2;
    var loc;
    var b;
    var found = false;
    var result = 0;
    for (i = boids.length-1; i>=0; i--) {
      b = boids[i];
      if (b.isAlive && (b.gid !== gid)) {
        loc = this.intersectBoid(b);
        if (loc) {
          for (j = loc.length-1; j>=0; j--) {
            d2 = dist2(this.p1, loc[j]);
            if (d2 < bestD2) {
              bestD2 = d2;
              found = true;
            }
          }
        }
      }
    }
    if (found) {
      result = Math.sqrt(bestD2);
    }
    return result;
  },

  display: function() {
    "use strict";
    if (this.isPerceptionRod || !detailedMode) {
      noFill();
      stroke(this.c);
      strokeWeight(0.5);
      line(w2p(this.p1.x), w2p(this.p1.y), w2p(this.p2.x), w2p(this.p2.y));
    } else {
      // first version

      /*
      noFill();
      //stroke(255,165,0, this.bodyAlpha);
      stroke(0);
      strokeWeight(ref_factor*1.0+1.0);
      line(w2p(this.p1.x), w2p(this.p1.y), w2p(this.p2.x), w2p(this.p2.y));

      strokeWeight(ref_factor*1.0);
      stroke(255);
      line(w2p(this.p1.x), w2p(this.p1.y), w2p(this.p2.x), w2p(this.p2.y));
      stroke(this.bodyRed, this.bodyGreen, this.bodyBlue, this.bodyAlpha);
      line(w2p(this.p1.x), w2p(this.p1.y), w2p(this.p2.x), w2p(this.p2.y));
      */

      

      noFill();
      var x1, y1, x_start, y_start, x_end, y_end;
      x_start = w2p(this.p1.x);
      y_start = w2p(this.p1.y);
      x_end = w2p(this.p2.x);
      y_end = w2p(this.p2.y);
      var ref_u = w2p(1)*4;

      var theNoise = 0;
      if (this.velocity.magSq() > 0) {
      	theNoise = (nextNoise(this.seed+nCount, this.seedFactor));
      } else {
      	theNoise = 0.5*fastSin(this.seed);
      }

      x1 = x_start + (x_end - x_start) * 1 / 2 + ref_u*(theNoise);
      y1 = y_start + (y_end - y_start) * 1 / 2 + ref_u*(theNoise);

      if (borders) {
      	noFill();
      	//stroke(255,165,0, this.bodyAlpha);
      	stroke(0);
      	strokeWeight(ref_factor*1.0+1.0);
      	beginShape();
      	vertex(x_start, y_start);
      	quadraticVertex(x1, y1, x_end, y_end);
      	endShape();
      	strokeWeight(ref_factor*1.0);
  	  }



      stroke(this.bodyRed, this.bodyGreen, this.bodyBlue, 255);
      strokeWeight(ref_factor*1.0);
      beginShape();
      vertex(x_start, y_start);
      quadraticVertex(x1, y1, x_end, y_end);
      endShape();


    }

  },

  killBoids: function(b) { // removes boids in b that the wall touches
    "use strict";
    var i;
    for (i = b.length-1; i >= 0; i--) {
      if (b[i].isAlive) {
        // wall-boid
        if (this.intersectBoid(b[i])) { // touched this boid.
          b[i].isAlive = false;
        }
      }
    }
  },

  // Wraparound
  borders: function() {
    "use strict";
    /*
    if (this.position.x < -this.r) this.position.x =  ref_w+this.r;
    if (this.position.y < -this.r) this.position.y = ref_h+this.r;
    if (this.position.x >  ref_w+this.r) this.position.x = -this.r;
    if (this.position.y > ref_h+this.r) this.position.y = -this.r;
    */
    if (Math.max(this.p1.x, this.p2.x) < 0) this.isAlive = false;
    if (Math.max(this.p1.y, this.p2.y) < 0) this.isAlive = false;
    if (Math.min(this.p1.x, this.p2.x) >  ref_w) this.isAlive = false;
    if (Math.min(this.p1.y, this.p2.y) > ref_h) this.isAlive = false;
  }
};

// brain interface, where the magic happens
var Brain = function() {
  "use strict";
  this.threshold = -1; // must be above this to count for output signals.
  this.nGameInput = nPerceptionRod*2; // 1 perception for walls, 1 for other boids
  this.nGameOutput = nActionState; // different output states
  this.feedback = 1;
  this.nRecurrentState = 8; // extra recurrent states for feedback.
  this.nOutput = this.nGameOutput+this.nRecurrentState;
  this.nInput = this.nGameInput+this.nOutput*this.feedback;

  // store current inputs and outputs
  this.inputState = convnetjs.zeros(this.nInput);
  this.convInputState = new convnetjs.Vol(1, 1, this.nInput); // compatible with convnetjs lib input.
  this.outputState = convnetjs.zeros(this.nOutput);
  this.prevOutputState = convnetjs.zeros(this.nOutput);

  // setup neural network:
  this.layer_defs = [];
  this.layer_defs.push({
    type: 'input',
    out_sx: 1,
    out_sy: 1,
    out_depth: this.nInput
  });
  this.layer_defs.push({
    type: 'fc',
    num_neurons: this.nOutput,
    activation: 'tanh'
  });

  this.net = new convnetjs.Net();
  this.net.makeLayers(this.layer_defs);

  if (initGene) {
    var chromosome = new convnetjs.Chromosome(initGenes[getRandomInt(0, initGenes.length)]);
    chromosome.pushToNetwork(this.net);
  } else {
    convnetjs.randomizeNetwork(this.net, 1.0); // set init settings to be random.
  }
};

Brain.prototype = {
  pushGene: function(gene) { // gives the brain a network defined by a gene array.
    var chromosome = new convnetjs.Chromosome(gene);
    chromosome.pushToNetwork(this.net);
  },
  getGene: function() { // retrieve gene
    return convnetjs.getGeneFromNetwork(this.net);
  },
  setInput: function(wallPerceptionIntensity, boidPerceptionIntensity) {
    var i;
    var wallPerceptionAmplifier = 10;
    var boidPerceptionAmplifier = 1;
    var feedbackAmplifier = 1;
    for (i = 0; i < nPerceptionRod; i++) {
      this.inputState[i] = wallPerceptionIntensity[i]*wallPerceptionAmplifier;
      this.inputState[nPerceptionRod+i] = boidPerceptionIntensity[i]*boidPerceptionAmplifier;
    }
    // do the feedback here.
    if (this.feedback === 1) {
      for (i = 0; i < this.nOutput; i++) {
        this.inputState[2*nPerceptionRod+i] = this.outputState[i]*feedbackAmplifier;
      }
    }
    // copies input state into convnet cube object format to be used later.
    for (i = 0; i < this.nInput; i++) { 
      //console.log('input '+i+': '+this.inputState[i]);
      this.convInputState.w[i] = this.inputState[i];
    }
  }, 
  forward: function() {
    "use strict";
    // get output from neural network:
    var a = this.net.forward(this.convInputState);
    for (var i = 0; i < this.nOutput; i++) {
      //console.log('output '+i+': '+this.outputState[i]);
      this.prevOutputState[i] = this.outputState[i]; // backs up previous value.
      this.outputState[i] = a.w[i];
    }
  },
  getAction: function(action_) { // rotation
    var action = action_ || 0;
    var output = this.outputState[action];

    if (output > 0) return 1;
    return -1;


    // below discard:
    /*
    var result = 0;
    var best = -2;
    for (var i = 0; i < nActionState; i++) {
      if (this.outputState[i] > best) {
        best = this.outputState[i];
        result = i;
      }
    }
    if (result > this.threshold) {
      return 1+result; // get highest state, and return only if signal strength exceeds threshold
    }
    return 0;
    */
  },
};

// Boids object
var Boid = function(x, y, initRadius) {
  "use strict";
  // All the usual stuff
  this.position = createVector(x, y);
  this.r = initRadius || radiusBaby;
  //if (demoMode) {
  //	this.r = random(1.25, 1.75);
  //}
  this.maxspeed = boidSpeed;    // Maximum speed
  this.maxforce = boidSteeringForce;  // Maximum steering force (traied 0.2)
  this.acceleration = createVector(0, 0);
  this.velocity = createVector(random(-1, 1), random(-1, 1));
  this.directionAngle = this.velocity.heading();
  this.targetCenter = createVector(0, 0);
  this.targetLocation = createVector(0, 0);
  this.wallPerception = zeros(nPerceptionRod);
  this.wallPerceptionIntensity = zeros(nPerceptionRod);
  this.boidPerception = zeros(nPerceptionRod); 
  this.boidPerceptionIntensity = zeros(nPerceptionRod);
  // refined perception if boid is not seen:
  this.perceptionRod = new Wall();
  this.perceptionRod.isPerceptionRod = true;
  this.isAlive = true;
  this.gid = getUniqueID();
  this.brain = new Brain();

  // randomise orientation for symmetry effect.
  this.orientation = -1;
  if (getRandom(0, 1) > 0.5) {
    this.orientation = 1;
  }

  this.score = 0;
  this.life = 0;
  this.state = 0; // controls left or right steering.
  this.state2 = 0; // controls whether the guy moves or not.

  // below variables are for drawing the creatures in detailed mode
  this.bornLife = babyLife; // when someone is reborn, fade back in.
  this.ghostLife = ghostLife; // short time being of being a ghost.
  /*
  this.bodyRed = 90;
  this.bodyGreen = 199;
  this.bodyBlue = 78;
  */
  var tempr = 64;
  var tempc = getRandomInt(0, 3);
  this.bodyRed = ((tempc+0)%3+1)*64+random(-tempr, tempr);
  this.bodyGreen = ((tempc+1)%3+1)*64+random(-tempr, tempr);
  this.bodyBlue = ((tempc+2)%3+1)*64+random(-tempr, tempr);
  this.bodyAlpha = random(0.3*255, 0.6*255);
  this.alpha = this.bodyAlpha; // this variable is used to draw border color.
  this.bodyColor = color(this.bodyRed, this.bodyGreen, this.bodyBlue, this.bodyAlpha);
  
  /*
  this.ghostRed = 255;
  this.ghostGreen = 99;
  this.ghostBlue = 71;
  */
  this.ghostRed = 255;
  this.ghostGreen = 255;
  this.ghostBlue = 255;
  /*
  this.ghostRed = this.bodyRed;
  this.ghostGreen = this.bodyGreen;
  this.ghostBlue = this.bodyBlue;
  */
  this.bounciness = 0.11 * getRandom(0.8, 1.2);
  this.nMembranePoints = 8;
  this.membraneDeviation = zeros(this.nMembranePoints);
  this.sensorDeviation = zeros(this.nMembranePoints);
  this.membraneLocX = zeros(this.nMembranePoints);
  this.membraneLocY = zeros(this.nMembranePoints);
  var thetaStep = 360.0 / this.nMembranePoints;
  for (var i = 0; i < this.nMembranePoints; i += 1) {
    this.membraneDeviation[i] = 0;
    this.membraneLocX[i] = fastSin(i * thetaStep);
    this.membraneLocY[i] = fastCos(i * thetaStep);
  }

  // the larger this number, the smaller the eyes:
  this.eyeSize = 3.0;

};

Boid.prototype = {

  setPerceptionRod: function(n, d) { // sets coordinates of perception rod to the nth position. d = distance is opt parameter
    var rod = this.perceptionRod;
    var r1 = this.r;
    var r2;
    if (d) {
      r2 = d+r1;
    } else {
      r2 = r1 * (1 + perceptionLengthWall * 2);
    }
    var angle = this.orientation * 360 * n / nPerceptionRod + this.directionAngle;
    rod.p1.x = this.position.x + r1*fastCos(angle);
    rod.p1.y = this.position.y + r1*fastSin(angle);
    rod.p2.x = this.position.x + r2*fastCos(angle);
    rod.p2.y = this.position.y + r2*fastSin(angle);
  },

  distToIntensity: function(d, len) { // map distance to (0 -> 1), where 1 is closest, and 0 is furthest.
    // useful for drawing the perception rod, and also for inputs to a neural network.
    var r = this.r;
    var maxD = len * 2 * r;
    if (d > 0) {
      var result = 1.0 - d / maxD;
      return (result*result); // if d is very close, but not zero, return 1, otherwise scale down to zero.
    }
    return 0.0;
  },

  getWallPerception: function(wallGrid, wallIntensityGrid) { // sweeps through all directions to see if any walls are seen.
    "use strict";
    var i;
    var d;
    for (i = 0; i < nPerceptionRod; i++) {
      this.setPerceptionRod(i+wallPerceptionOffset+this.sensorDeviation[i]);
      d = this.perceptionRod.distClosestWall(walls, this.r);
      wallIntensityGrid[i] *= wallPerceptionDecay;
      if (d) {
        wallGrid[i] = d;
        wallIntensityGrid[i] = this.distToIntensity(d, perceptionLengthWall);
      } else {
        wallGrid[i] = 0;
        //wallIntensityGrid[i] = 0;
      }
    }
  },

  getBoidPerception: function() { // sweeps through all directions to see if any (other) boids are seen.
    var i;
    var d;
    for (i = 0; i < nPerceptionRod; i++) {
      this.setPerceptionRod(i+boidPerceptionOffset+this.sensorDeviation[i], this.r*2*perceptionLengthBoid);
      d = this.perceptionRod.distClosestBoid(boids, this.gid);
      this.boidPerceptionIntensity[i] *= boidPerceptionDecay;
      if (d) {
        this.boidPerception[i] = d;
        this.boidPerceptionIntensity[i] = this.distToIntensity(d, perceptionLengthBoid);
      } else {
        this.boidPerception[i] = 0;
        //this.boidPerceptionIntensity[i] = 0;
      }
    }
  },

  calculateTarget: function(theAction, theAction2) { // [-1, 1], [-1, 1] relative direction vector
    /*
    var avgIntensity = this.averageIntensity(this.wallPerceptionIntensity);
    if (avgIntensity > 0.01) {
      this.state = 0+theAction*1;
    } else {
      this.state = random(-0.3, 0.3);  
    }
    */


    this.state = 0+theAction*1;

    this.state2 = (theAction2+1)/2; // 1 or 0.


    //this.state = (getRandomInt(0, 2)-0.5) * 2;
    //console.log(this.state);

    //var angle = 360.0 * (this.state-0.5*(nActionState+1))/(nActionState+1) + this.directionAngle;
    var angle = this.orientation * 90 * (this.state) + this.directionAngle;
  
    var r = this.r * this.state2;
    var rDir = r * nActionRadius;
    var x = rDir * fastCos(angle);
    var y = rDir * fastSin(angle);

    this.targetCenter.x = this.position.x + r*nActionDistance*fastCos(this.directionAngle)*1;
    this.targetCenter.y = this.position.y + r*nActionDistance*fastSin(this.directionAngle)*1;

    this.targetLocation.x = this.targetCenter.x + x*1.25;
    this.targetLocation.y = this.targetCenter.y + y*1.25;
  },

  noBoidSeen: function() { // returns true if the sum of boidPerceptionIntensity is zero.
    for (var i = 0; i < nPerceptionRod; i++) {
      if (this.boidPerceptionIntensity[i] > 0) {
        return false;
      }
    }
    return true;
  },

  averageIntensity: function(intensity) { // returns sum of intensities.
    var result = 0;
    for (var i = 0; i < nPerceptionRod; i++) {
      result += intensity[i];
    }
    return result/nPerceptionRod;
  },

  applyBehaviors: function(boids) {
    var separateForce = null;
    var i;

    // membrane is used to draw detailed creature, but also reused for waggle sensors!  a bit of a hack.
    this.processMembrane();

    // switch orientations occasionally (encourages symmetry):
    if (getCount() % orientationFreq === getRandomInt(0, orientationFreq)) {
      this.orientation *= -1;
    }

    // tick bornlife lower for newly borns
    if (this.bornLife > 0) {
      this.bornLife --;
    }

    if (collisionMode === 1) {
      separateForce = this.separate(boids);
    } else {
      separateForce = createVector(0, 0);
    }

    // update perception
    this.getWallPerception(this.wallPerception, this.wallPerceptionIntensity);

    if (collisionMode === 1 && boidPerceptionMode) {
      this.getBoidPerception();
      /*
      for (i = 0; i < nPerceptionRod; i++) {
        if (this.wallPerceptionIntensity[i] < this.boidPerceptionIntensity[i] * boidPerceptionStrength) {
          this.wallPerception[i] = this.boidPerception[i];
          this.wallPerceptionIntensity[i] = boidPerceptionStrength*this.boidPerceptionIntensity[i];
        }
      }
      */
    }

    // increase the score every time the brain is used (ie, every frame of simulation):
    this.score++;
    var growthDelta = random(0.0, 4.0);
    this.life += growthDelta; // if life reaches some limit, this boid can mate with another boid.

    // increase the radius by a little bit.
    if (this.r < radiusAdult) {
      this.r += radiusGrowth*growthDelta;
    } else {
      this.r = radiusAdult;
    }

    // change eye size due to horniness
    this.eyeSize = 3.0 - 0.5 * Math.max(Math.min(1.0,(this.life) / (childhoodLife)), 0.0);

    // puts perception into the brain:
    this.brain.setInput(this.wallPerceptionIntensity, this.boidPerceptionIntensity); 
    this.brain.forward();

    this.calculateTarget(this.brain.getAction(0), this.brain.getAction(1));

    var seekForce = this.seek(this.targetLocation);
    //var seekForce = createVector(0, 0);

    separateForce.mult(collisionForceFactor);
    seekForce.mult(1.0);
    
    this.applyForce(separateForce);
    this.applyForce(seekForce); 
  },

  applyForce: function(force) {
    // We could add mass here if we want A = F / M
    this.acceleration.add(force);
  },

  mutate: function() { // mutate this agent's gene.
    var chromosome = new convnetjs.Chromosome(this.brain.getGene());
    chromosome.mutate(0.05, 1);
    this.brain.pushGene(chromosome.gene);
  },

  // mate with another boid to generate two offsprings
  mate: function(that) {
    if (this.life < childhoodLife || that.life < childhoodLife || getNumDeadBoids() < 2) return;

    // if demomode, remove first genes, and add this guy's gene to the gene pool
    if (demoMode) {
      initGenes.shift();
      initGenes.push(this.brain.getGene());
      console.log('added boid #'+this.gid+' to gene pool.');
      console.log('gene pool size is '+initGenes.length);
    }

    this.life -= childhoodLife;
    that.life -= childhoodLife;

    var chromosome1 = new convnetjs.Chromosome(this.brain.getGene());
    var chromosome2 = new convnetjs.Chromosome(that.brain.getGene());

    var childChromosome1 = chromosome1.clone();
    var childChromosome2 = chromosome2.clone();

    chromosome1.crossover(chromosome2, childChromosome1, childChromosome2);
    childChromosome1.mutate(0.05, 1);
    childChromosome2.mutate(0.05, 1);

    var baby1 = new Boid();
    boids[getDeadBoidIndex()] = baby1;
    var baby2 = new Boid();
    boids[getDeadBoidIndex()] = baby2;

    baby1.position = this.targetLocation.copy();
    baby2.position = that.targetLocation.copy();

    baby1.r = radiusBaby;
    baby2.r = radiusBaby;

    baby1.brain.pushGene(childChromosome1.gene);
    baby2.brain.pushGene(childChromosome2.gene);

  },

  // Separation
  // Method checks for nearby vehicles and steers away
  separate: function(boids) {
  	"use strict";
    var desiredseparation2 = this.r*this.r*2*2;
    var sum = createVector();
    var count = 0;
    var diff;
    var d2 = 0;
    // For every boid in the system, check if it's too close
    for (i = boids.length-1; i >= 0; i--) {
      if (boids[i].isAlive && (this.gid != boids[i].gid)) {
        diff = p5.Vector.sub(this.position, boids[i].position);
        d2 = diff.magSq();
        desiredseparation2 = this.r+boids[i].r;
        desiredseparation2 *= desiredseparation2;
        // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
        if ((d2 > 0) && (d2 < (desiredseparation2))) {

          // if reproduction mode is on, then have sex with this other boid to make 2 kids! (i liked typing this comment...)
          if (boidReproduce) {
            this.mate(boids[i]);
          }

          // Calculate vector pointing away from neighbor
          //diff.normalize();
          diff.div(Math.max(d2,0.01));        // Weight by distance, but avoid division by zero.
          sum.add(diff);
          count++;            // Keep track of how many
        }
      }
    }
    // obstacle placed by mouse:
    if (obstacle.active && obstacle.life > 0) {
        diff = p5.Vector.sub(this.position, createVector(obstacle.x, obstacle.y));
        d2 = diff.magSq();
        desiredseparation2 = this.r+obstacle.r;
        desiredseparation2 *= desiredseparation2;
        // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
        if ((d2 > 0) && (d2 < (desiredseparation2))) {
          // Calculate vector pointing away from neighbor
          //diff.normalize();
          diff.div(Math.max(d2,0.01));        // Weight by distance, but avoid division by zero.
          diff.mult(obstacle.forceFactor);
          sum.add(diff);
          count++;            // Keep track of how many
        }
    }
    // Average -- divide by how many
    if (count > 0) {
      sum.div(count);
      // Our desired vector is the average scaled to maximum speed
      sum.normalize();
      sum.mult(this.maxspeed);
      // Implement Reynolds: Steering = Desired - Velocity
      sum.sub(this.velocity);
      sum.limit(this.maxforce);
    }
    return sum;
  },

  // A method that calculates a steering force towards a target
  // STEER = DESIRED MINUS VELOCITY
  seek: function(target) {
    var desired = p5.Vector.sub(target,this.position);  // A vector pointing from the location to the target
    var distance = desired.mag();
    var speed = this.maxspeed;

    // Normalize desired and scale to maximum speed
    desired.normalize();

/*
    if (distance < (this.r/1) ) { // slowly go towards target (disabled)
      speed = this.maxSpeed*0.5 * (distance / (this.r/1)) + this.maxSpeed * 0.5;
    }
*/

    desired.mult(speed);
    // Steering = Desired minus velocity
    var steer = p5.Vector.sub(desired,this.velocity);
    steer.limit(this.maxforce);  // Limit to maximum steering force    
    return steer;
  },

  // Method to update location
  update: function() {
    // Update velocity
    this.velocity.add(this.acceleration);
    // Limit speed
    this.velocity.limit(this.maxspeed);
    // update current angle
    if (this.velocity.magSq() > 0) {
      this.directionAngle = this.velocity.heading();
    }
    this.position.add(this.velocity);
    // Reset accelertion to 0 each cycle
    this.acceleration.mult(0);
  },

  drawPerceptionRods: function() {
    if (!this.isAlive) {
      return;
    }

    var i, d;
    var intensity;

    var perceptionMaskWall = [1, 1, 1, 1, 1, 1, 1, 1];
    var perceptionMaskBoid = [1, 1, 1, 1, 1, 1, 1, 1];
    if (detailedMode) {
      perceptionMaskWall = [1, 1, 0, 0, 0, 0, 1, 1];
      perceptionMaskBoid = [1, 1, 0, 0, 0, 0, 0, 1];
    }

    for (i = 0; i < nPerceptionRod; i++) {
      d = this.wallPerception[i];
      if (d > 0.25 && perceptionMaskWall[i] ) {
        this.setPerceptionRod(i+wallPerceptionOffset+this.sensorDeviation[i], d);
        intensity = 245-64*this.wallPerceptionIntensity[i];

        if (!detailedMode || mobileMode) {
          this.perceptionRod.c = color(intensity);
        } else {
          this.perceptionRod.c = color(this.bodyRed, this.bodyGreen, this.bodyBlue, (245-intensity)*2);
        }

        this.perceptionRod.display();
      }

      d = this.boidPerception[i];
      if (d > 0.25 && perceptionMaskBoid[i]) {
        this.setPerceptionRod(i+boidPerceptionOffset+this.sensorDeviation[i], d);
        intensity = 245-64*this.boidPerceptionIntensity[i];

        if (!detailedMode || mobileMode) {
          this.perceptionRod.c = color(intensity);
        } else {
          this.perceptionRod.c = color(this.bodyRed, this.bodyGreen, this.bodyBlue, (245-intensity)*1);
        }

        this.perceptionRod.display();
      }
      
    } 
  },

  drawDirectionWheel: function() {
    if (!this.isAlive) {
      return;
    }
    var i;
    var pr = w2p(this.r);
    
    
    if (!detailedMode && this.state2 > 0) {
      /*
      noFill();
      stroke(128, 32);
      strokeWeight(0.5);
      ellipse(w2p(this.targetCenter.x), w2p(this.targetCenter.y), pr*nActionRadius, pr*nActionRadius);
      line(w2p(this.targetCenter.x), w2p(this.targetCenter.y), w2p(this.targetLocation.x), w2p(this.targetLocation.y));
      */
      fill(96, 64);
      noStroke();
      ellipse(w2p(this.targetLocation.x), w2p(this.targetLocation.y), pr*nActionRadius/3, pr*nActionRadius/3);
    }
  },

  drawBasicAgent: function() {
    var i;
    var pr = w2p(this.r);

    fill(127, 32);

    stroke(32, 128);
    strokeWeight(0.5);
    push();
    translate(w2p(this.position.x), w2p(this.position.y));
    rotate(this.directionAngle);
    ellipse(0, 0, pr, pr);
    line(0, 0, pr, 0);
    pop();
  },

  processMembrane: function() {
    var i, deviation, N, pr;
    pr = w2p(this.r);
    N = this.nMembranePoints;
    for (i = 0; i < N; i++) {
      deviation = this.membraneDeviation[i];
      deviation += pr * this.bounciness * getRandom(-1.0, 1.0);
      deviation *= 0.95;
      this.membraneDeviation[i] = deviation;
      this.sensorDeviation[i] = 1.0*deviation / pr;
    }
  },

  drawDetailedAgent: function() {
    "use strict";
    var pr = w2p(this.r);
    var N = this.nMembranePoints;
    var i,
      r = this.r,
      eyeIndex, eyeDist = 0.6,
      len, antilen, locX, locY;

    var hx = zeros(this.nMembranePoints);
    var hy = zeros(this.nMembranePoints);
    var ex, ey; // eyes
    var er;
    var pupilx, pupily, pupilr;

    // come up with the shape of the creature:
    for (i = 0; i < N; i++) {
      len = pr + this.membraneDeviation[i];
      locX = this.membraneLocX[i];
      locY = this.membraneLocY[i];
      hx[i] = len * locX;
      hy[i] = len * locY;
    }

    // new borns:
    if (this.bornLife > 0 && this.isAlive) {
      this.alpha = this.bodyAlpha * ((babyLife - this.bornLife)/babyLife);
      this.bodyColor = color(this.bodyRed, this.bodyGreen, this.bodyBlue, this.alpha);
    }

    fill(this.bodyColor);

    var strokeAlphaValue = 192;

    if (!this.isAlive || this.bornLife > 0 ) {
    	strokeAlphaValue = 255*this.alpha / this.bodyAlpha;
    }
    stroke(0, strokeAlphaValue);
    strokeWeight(0.5*this.r/radiusAdult);
    if (!borders) {
      noStroke();
    }
    push();
    translate(w2p(this.position.x), w2p(this.position.y));
    rotate(this.directionAngle);
    beginShape();
    //vertex(hx[0], hy[0]);
    for (i = 0; i < N; i++) {
      curveVertex(hx[i], hy[i]);
    }
    vertex(hx[0], hy[0]);
    vertex(hx[1], hy[1]);
    vertex(hx[2], hy[2]);
    endShape();

    for (i = 0; i < 2; i++) {
      eyeIndex = Math.round(this.nMembranePoints * (1 - (0.625 + 0.25 * i)));
      len = pr + this.membraneDeviation[eyeIndex] * 1;
      antilen = pr + this.membraneDeviation[eyeIndex + 1 - 2 * i] * 1;
      locX = this.membraneLocX[eyeIndex];
      locY = this.membraneLocY[eyeIndex];
      ex = len * locX * eyeDist * len / pr;
      ey = len * locY * eyeDist * antilen / pr;
      er = pr/this.eyeSize;
      pupilx = len * locX * eyeDist * len / pr;
      pupily = len * locY * eyeDist * antilen / pr;
      pupilr = pr/(2*this.eyeSize+1);
      stroke(0, strokeAlphaValue);
      strokeWeight(0.5*this.r/radiusAdult);
      if (!borders) {
        noStroke();
      }
      fill(255);
      ellipse(ex, ey, er, er);
      noStroke();

      if (borders) {
        fill(0, strokeAlphaValue);
      } else {
        fill(64, strokeAlphaValue);
      }
      
      ellipse(pupilx, pupily, pupilr, pupilr);
    }

    pop();

    // detailed drawing of direction wheel
    if (drawDirectionWheel && this.state2 > 0 ) {
      strokeWeight(2.0*this.r/radiusAdult);
      stroke(0, strokeAlphaValue);
      if (!borders) {
        noStroke();
      }
      push();
      translate(w2p(this.targetLocation.x), w2p(this.targetLocation.y));
      scale(0.35);

      ellipse(0, 0, pr, pr);
/*
      rotate(this.directionAngle);

      beginShape();
      //vertex(hx[0], hy[0]);
      for (i = 0; i < N; i+=1) {
        curveVertex(hx[i], hy[i]);
      }
      vertex(hx[0], hy[0]);
      vertex(hx[1], hy[1]);
      vertex(hx[2], hy[2]);
      endShape();
*/
      pop();

    }


  },

  display: function() {


    if (detailedMode) {
      this.drawDetailedAgent();
    } else {
      this.drawBasicAgent();
    }

    if (drawDirectionWheel) {
      this.drawDirectionWheel();
    }
        
    if (drawPerceptionRods) {
      this.drawPerceptionRods();
    }


  },

  // Wraparound
  borders: function() {
    /*
    if (this.position.x < -this.r) this.position.x =  ref_w+this.r;
    if (this.position.y < -this.r) this.position.y = ref_h+this.r;
    if (this.position.x >  ref_w+this.r) this.position.x = -this.r;
    if (this.position.y > ref_h+this.r) this.position.y = -this.r;
    */
    if (this.position.x < -this.r) this.isAlive = false;
    if (this.position.y < -this.r) this.isAlive = false;
    if (this.position.x >  ref_w+this.r) this.isAlive = false;
    if (this.position.y > ref_h+this.r) this.isAlive = false;
  }

};

function Trainer() {
  // trainer for neural network interface.  must pass in an initial brain so it knows the net topology.
  // the constructor won't modify the brain object passed in.

  this.brain = new Brain(); // make a dummy brain for above purpose.
  this.net = this.brain.net;

  this.trainer = new convnetjs.GATrainer(this.net, {
      population_size: nBoids,
      mutation_size: 1.00,
      mutation_rate: 0.05,
      init_weight_magnitude: 0.1,
      elite_percentage: 0.30
    }, initGene);

}
Trainer.prototype = {
  train: function() {
    var i;
    nGeneration++;
    this.clearFitness();
    for (i = 0; i < 1; i++) {
      initGame();
      this.pushGenes();
      update(30*60*8);
      this.addFitness();
    }
    //this.normalizeFitness();
    console.log('-------------');
    console.log('GEN: '+nGeneration);
    console.log('-------------');
    this.trainer.evolve();

  },
  pushGenes: function() {
    var i;
    var c;
    for (i = 0; i < nBoids; i++) {
      c = this.trainer.chromosomes[i];
      boids[i].brain.pushGene(c.gene);
    }
  },
  pushBestGenes: function() {
    var i;
    var h;
    var c;
    for (i = 0; i < nBoids; i++) {
      h = getRandomInt(0, this.trainer.hall_of_fame_size);
      c = this.getBestChromosome(h);
      boids[i].brain.pushGene(c.gene);
    }
  },
  clearFitness: function() {
    var i;
    for (i = 0; i < nBoids; i++) {
      this.trainer.chromosomes[i].fitness = 0;
    }
  },
  addFitness: function() {
    var i;
    for (i = 0; i < nBoids; i++) {
      this.trainer.chromosomes[i].fitness += boids[i].score;
    }
  },
  normalizeFitness: function() {
    var i, totalScore = 0, avgScore;
    for (i = 0; i < nBoids; i++) {
      totalScore += boids[i].score;
    }
    avgScore = totalScore / nBoids;
    for (i = 0; i < nBoids; i++) {
      this.trainer.chromosomes[i].fitness -= avgScore;
    }
  },
  getChromosome: function(n) {
    // returns a copy of the nth best chromosome (if not provided, returns first one, which is the best one)
    n = n || 0;
    return this.trainer.chromosomes[n].clone();
  },
  getBestChromosome: function(n) {
    // return best historical one
    n = n || 0;
    return this.trainer.hallOfFame[n].clone();
  }
};
setInitGene(0);
trainer = new Trainer();

function makeRandomWall() {
  var x1, y1, x2, y2, vx, vy;

  var speed = random(wallSpeed/3, wallSpeed);
  var diag = Math.sqrt(ref_h*ref_h + ref_w*ref_w)/Math.sqrt(2); // min(ref_h, ref_w);
  var len = random(diag / 8, diag / 4);
  var angle;

  var choice = getRandomInt(0, 4);

/*
  if (width < height) {
    choice += 2; // from top and bottom instead.
  }
*/

  //choice = 0;

  if (choice === 0) {
    x1 = 0;
    y1 = random(0, ref_h);
    angle = getRandomInt(90, 270);
  } else if (choice === 1) {
    x1 = ref_w;
    y1 = random(0, ref_h);
    angle = getRandomInt(-90, 90);
  } else if (choice === 2) {
    x1 = random(0, ref_w);
    y1 = 0;
    angle = getRandomInt(-180, 0);
  } else {
    x1 = random(0, ref_w);
    y1 = ref_h;
    angle = getRandomInt(0, 180);
  }

  x2 = x1 + len * fastCos(angle);
  y2 = y1 + len * fastSin(angle);

  var offsetLen = random(0, min(ref_h, ref_w)/2);
  var offsetAngle = getRandomInt(0, 360);

  var velocity = createVector(ref_w/2 - (x1+x2)/2 +offsetLen*fastCos(offsetAngle), ref_h/2 - (y1+y2)/2+offsetLen*fastSin(offsetAngle));
  velocity.normalize();
  velocity.mult(speed); 

  var wall = new Wall({
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2,
    vx: velocity.x,
    vy: velocity.y
  });
  walls.push(wall);
}

function makeRandomInitWalls() {
  "use strict";
  var x1, y1, x2, y2, vx, vy;

  var speed;
  var diag = Math.sqrt(ref_h*ref_h+ref_w*ref_w); //Math.sqrt(ref_h*ref_h + ref_w*ref_w);
  var len;
  var angle;

  var i, offsetLen, offsetAngle, wall, velocity;

  for (i = 0; i < initWalls; i++) {

    speed = random(wallSpeed/3, wallSpeed);
    len = random(diag / 3, diag / 6);

    angle = random(0, 360);

    x1 = random(0.3 * ref_w, 0.7 * ref_w);
    y1 = random(0.3 * ref_h, 0.7 * ref_h);

    x2 = x1 + len * fastCos(angle);
    y2 = y1 + len * fastSin(angle);

    offsetLen = random(0, min(ref_h, ref_w)/4);
    offsetAngle = getRandomInt(0, 90);

    velocity = createVector(ref_w/2 - (x1+x2)/2 +offsetLen*fastCos(offsetAngle), ref_h/2 - (y1+y2)/2+offsetLen*fastSin(offsetAngle));
    velocity.normalize();
    velocity.mult(speed); 

    wall = new Wall({
      x1: x1,
      y1: y1,
      x2: x2,
      y2: y2,
      vx: velocity.x,
      vy: velocity.y
    });
    walls.push(wall);

  }
}

function numBoidsAlive() {
  // returns the number of boids that are still alive.
  "use strict";
  var i;
  var result = 0;
  for (i = boids.length-1; i>= 0; i--) {
    if (boids[i].isAlive) {
      result++;
    }
  }
  return result;
}

function isBoidNearby(x, y) { // returns true if wall or boid is nearby, so new boids are not placed in danger.
  var i = 0;
  var b, w;
  var pos = createVector(x, y);
  var d = 6.0;
  for (i = boids.length-1; i >=0; i--) {
    b = boids[i];
    if (b.isAlive) {
      d = b.r*4.0;
      if (dist2(b.position, pos) < (d*d)) {
        return true;
      }
    }
  }
  for (i = walls.length-1; i>=0; i--) {
    w = walls[i];
    if (w.intersectCircle(x, y, d)) {
      return true;
    }
  }
  return false;
}

function isWallNearby(x, y) { // returns true if wall or boid is nearby, so new boids are not placed in danger.
  var i = 0;
  var b, w;
  var pos = createVector(x, y);
  var d = 6.0;

  for (i = walls.length-1; i>=0; i--) {
    w = walls[i];
    if (w.intersectCircle(x, y, d)) {
      return true;
    }
  }
  return false;
}

function rebornBoid(x, y, initRadius) {

  if (x < 0.1 * ref_w || x > 0.9 * ref_w) return;
  if (y < 0.1 * ref_h || y > 0.9 * ref_h) return;

  var i = 0;
  var b;
  for (i = 0; i < nBoids; i++) {
    b = boids[i];
    if (!b.isAlive && b.ghostLife <= 0) {
      if (!isBoidNearby(x,y)) {
        boids[i] = new Boid(x,y, initRadius);
        if (demoMode) {
          //boids[i].mutate(); // always generated a mutated boid during demo mode.
        }
        return true;
      }
    }
  }
  return false;
}

function rebornRandomBoid(initRadius) { // have it generate the random vacation
  var x, y, birthAttempt;
  for (var i = 0; i < 100; i++) {
    x = getRandom(0.2*ref_w, ref_w*0.8);
    y = getRandom(0.2*ref_h, ref_h*0.8);
    birthAttempt = rebornBoid(x, y, initRadius);
    if (birthAttempt) return;
  }
}

function generateInitBoids() {
  for ( i = 0; i < nBoids; i++) {
    boids[i].isAlive = false;
    boids[i].ghostLife = 0;
  }
  for (i = 0; i < initDemoboids; i++) {
    rebornRandomBoid(radiusAdult);
  }
}

function initGame() { // wipes the board and initialises game from scratch
  "use strict";

  walls = [];
  boids = [];
  var bound1 = 0.2;
  var bound2 = 0.8;
  var i;

  if (demoMode) {
    bound1 = 0.2;
    bound2 = 0.8;
  }

  if (nBoidsFactor > 0) {
    nBoids = Math.floor(ref_h*ref_w*nBoidsFactor);
  }

  makeRandomInitWalls();

  // We are now making random boids and storing them in an array
  for ( i = 0; i < nBoids; i++) {
    //boids.push(new Boid(random(ref_w*0.1, ref_w*0.9),random(ref_h*0.1, ref_h*0.9)));
    boids.push(new Boid(random(ref_w*bound1, ref_w*bound2),random(ref_h*bound1, ref_h*bound2)));
  }

  if (demoMode) {
    generateInitBoids();
  }

  // make 4 wall objects to border screen
  walls.push(new Wall({
    x1: random(0.025, 0.05)*ref_w,
    y1: random(0.025, 0.05)*ref_h,
    x2: (1-random(0.025, 0.05))*ref_w,
    y2: random(0.025, 0.05)*ref_h,
    vx: 0,
    vy: 0
  }));
  walls.push(new Wall({
    x1: (1-random(0.025, 0.05))*ref_w,
    y1: (1-random(0.025, 0.05))*ref_h,
    x2: (1-random(0.025, 0.05))*ref_w,
    y2: random(0.025, 0.05)*ref_h,
    vx: 0,
    vy: 0
  }));
  walls.push(new Wall({
    x1: random(0.025, 0.05)*ref_w,
    y1: (1-random(0.025, 0.05))*ref_h,
    x2: (1-random(0.025, 0.05))*ref_w,
    y2: (1-random(0.025, 0.05))*ref_h,
    vx: 0,
    vy: 0
  }));
  walls.push(new Wall({
    x1: random(0.025, 0.05)*ref_w,
    y1: random(0.025, 0.05)*ref_h,
    x2: random(0.025, 0.05)*ref_w,
    y2: (1-random(0.025, 0.05))*ref_h,
    vx: 0,
    vy: 0
  }));
}

function trainBoids(cycles) {
  for (var i = 0; i < cycles; i++) {
    trainer.train();
  }
}

// p5 specific code:

function calibrateCanvas() {
  // define screen independent height (will need to be done on resize)
  "use strict";
  if (demoMode) {
    if (height > width) {
      ref_h = ref_w *( height/width );
    } else {
      ref_w = ref_h *( width/height );
    }
  }
  ref_factor = Math.min(width/ref_w, height/ref_h);
}

function windowResized() {
  "use strict";
  if (demoMode) {
    resizeCanvas(windowWidth,windowHeight);
  } else {
    resizeCanvas(min(windowWidth, windowHeight), min(windowWidth, windowHeight));
  }

  myCanvas.size(windowWidth, windowHeight);
  ref_factor = Math.min(width/ref_w, height/ref_h);
}

function setup() {

  "use strict";

  // deal with mobile device nuances
  md = new MobileDetect(window.navigator.userAgent);

  console.log(md.mobile());
  if (md.mobile()) {
      mobileMode = true;
      console.log('mobile or ios: '+md.mobile());
  } else {
      console.log('not mobile');
  }

  if (demoMode) {
    myCanvas = createCanvas(windowWidth,windowHeight);
  } else {
    myCanvas = createCanvas(min(windowWidth, windowHeight),min(windowWidth, windowHeight));
  }
  myCanvas.parent('p5Container');
  calibrateCanvas();
  frameRate(theFrameRate);

  angleMode(DEGREES);
  ellipseMode(RADIUS);

  textFont("monospace");
  textSize(12);

  if (initialTrain) {
    trainBoids(genSteps);
  } else {
    trainBoids(0);
  }

  initGame();

}

function update(cycles) {

  var i, j, nAlive;
  var chance, x, y, birthAttempt;

  for (j = 0; j < cycles; j++) {

    if (nFrame++ % wallFreq === 0) {
      makeRandomWall();
    }

    for (i = boids.length-1; i >= 0 ; i--) {
      if (boids[i].isAlive) {
        boids[i].update();
        boids[i].borders();
      }
    }

    for (i = walls.length-1; i >= 0 ; i--) {
      if (walls[i].isAlive) {
        walls[i].update();
        walls[i].borders();
        walls[i].killBoids(boids); // remove boids that each wall touches.
      }
      // clean up dead wall
      if (!walls[i].isAlive) {
        walls.splice(i, 1);
      }
    }

    // apply decision.
    for (i = boids.length-1; i >= 0 ; i--) {
      if (boids[i].isAlive) {
        boids[i].applyBehaviors(boids);
      }
    }
    // switch off the exert force (one time only)
    obstacle.life--;
    obstacle.r = Math.max(obstacle.life, 0);

    // see how many guys remain alive.
    nAlive = 0;
    for (i = boids.length-1; i >= 0 ; i--) {
      if (boids[i].isAlive) {
        nAlive++;
      }
    }

    // if no boids left, just leave.
    if (nAlive === 0) {
      return;
    }

    // for demo mode only, randomy place boids back
    if (demoMode) {

      if (boidRegenerate === true && (frameCount % boidFreq === getRandomInt(0, boidFreq))) {
        chance = getRandom(0, 1);
        if (chance > (nAlive / nBoids)) {
          for (j = 0; j < 100; j++) { // try 100 times
            x = getRandom(0.2*ref_w, ref_w*0.8);
            y = getRandom(0.2*ref_h, ref_h*0.8);
            birthAttempt = rebornBoid(x, y);
            if (birthAttempt) {
              //console.log('new boid is born! chance = '+(nAlive / nBoids));
              break;
            }
          }
        }
      }
    }
  }
}

function updateGhost() {
  var i;

  for (i = boids.length-1; i >= 0 ; i--) {
    if (boids[i].isAlive === false && boids[i].ghostLife > 0) {
      boids[i].ghostLife--;
      boids[i].update();
    }
  }

}

// tracking mouse  touchpad
var tracking = {
  down: false,
  x: 0,
  y: 0,
  mx: 0,
  my: 0
};

function draw() {

  var i, j, k, b;
  var intersect;

  // update stuff
  update(1);

  // in game only, if there are no more boids, reset game
  if (numBoidsAlive() === 0) {
    trainBoids(genSteps);
    if (demoMode) {
      generateInitBoids();
    } else {
      initGame();
    }
    trainer.pushBestGenes();

    printBestGenes();

    bestGen = trainer.getChromosome().fitness;
    bestHall = trainer.getBestChromosome().fitness;
  }

  background(255);

  
  if (detailedMode && !borders) {
    noStroke();
    //fill(30,144,255, 32);
    fill(192, 128);
    rect(0, 0, width, height);
  }
  

  if (genSteps > 0) {
    noStroke();
    fill(128, 128);
    text('generation '+nGeneration, w2p(ref_w*0.06), w2p(ref_h*0.08));
    text('best fitness '+bestGen, w2p(ref_w*0.06), w2p(ref_h*0.08)+16);
    text('hall of fame '+bestHall, w2p(ref_w*0.06), w2p(ref_h*0.08)+16*2);
  }

  if (detailedMode) {

    // draw ghosts
    for (i = boids.length-1; i >= 0 ; i--) {
      b = boids[i];
      if (b.isAlive === false && b.ghostLife > 0) {
        b.maxspeed *= 0.9;
        b.alpha = b.bodyAlpha * (b.ghostLife/ghostLife);
        if (borders) {
        	b.bodyColor = color(b.ghostRed, b.ghostGreen, b.ghostBlue, b.alpha);
        } else {
        	b.bodyColor = color(b.bodyRed, b.bodyGreen, b.bodyBlue, b.alpha);
        }
        b.display();
      }
    }

    // deal with ghosts
    updateGhost(1);

  }

  for (i = boids.length-1; i >= 0 ; i--) {
    if (boids[i].isAlive) {
      boids[i].display();
    }
  }

  for (i = walls.length-1; i >= 0 ; i--) {
    if (walls[i].isAlive) {
      walls[i].display();
    }
  }

  // draw wall creation line:
  if (tracking.down) {
    var dy = (tracking.my-tracking.y);
    var dx = (tracking.x-tracking.x);
    if ((dy*dy+dx*dx) > 16) {
      stroke(200);
      strokeWeight(0.5);
      line(tracking.x, tracking.y, tracking.mx, tracking.my);
    }
  }

  // draw agent blow (via mouse click)
  if (obstacle.life > 0) {
  	noStroke();
  	fill(obstacle.life*16, obstacle.life);
  	ellipse(w2p(obstacle.x), w2p(obstacle.y), w2p(obstacle.r), w2p(obstacle.r));
  }

}

function flushDeadBodies() {
  var i = 0;
  var b;
  for (i = 0; i < nBoids; i++) {
    b = boids[i];
    if (!b.isAlive && b.ghostLife > 0) {
      b.ghostLife = 0;
    }
  }
}


var deviceReleased = function(x, y) {
  "use strict";

  tracking.down = false;

  var oldPos = createVector(p2w(tracking.x), p2w(tracking.y));
  var newPos = createVector(p2w(x), p2w(y));
  var createWall = false;
  var d = 4;
  if (dist2(oldPos, newPos) > d*d) {
    createWall = true;
  }

  if (!createWall) {
    if (isBoidNearby(p2w(x), p2w(y))) { // if clicked on a boid or wall, change display mode
      if (isWallNearby(p2w(x), p2w(y))) { // change display state
      	flushDeadBodies();
      	toggleDisplayState();
  	  } else { // exert force
  	  	console.log('exert force');
  	  	obstacle.x = p2w(x);
  	  	obstacle.y = p2w(y);
		obstacle.active = true;
		obstacle.life = obstacle.fullLife;
  	  }
    } else { // make a new boid since clicked on empty space
      rebornBoid(p2w(x), p2w(y));
    }
  } else { // launch a new wall since dragged
      var speed = random(wallSpeed/3, wallSpeed);

      var velocity2 = p5.Vector.sub(newPos, oldPos);
      velocity2.normalize();
      velocity2.mult(speed);
      var velocity = createVector(velocity2.y, -velocity2.x);

      var wall = new Wall({
        x1: oldPos.x,
        y1: oldPos.y,
        x2: newPos.x,
        y2: newPos.y,
        vx: velocity.x,
        vy: velocity.y
      });
      walls.push(wall);
  }

  return false;
};

var devicePressed = function(x, y) {
  tracking.mx = x;
  tracking.my = y;
  if (!tracking.down) {
    tracking.down = true;
    tracking.x = x;
    tracking.y = y;
  }
};

var mousePressed = function() {
  "use strict";
  devicePressed(mouseX, mouseY);
  return false;
};

var mouseDragged = function() {
  "use strict";
  devicePressed(mouseX, mouseY);
  return false;
};

var touchStarted = function() {
  "use strict";
  devicePressed(touchX, touchY);
  return false;
};

var mouseReleased = function() {
  "use strict";
  deviceReleased(mouseX, mouseY);
  return false;
};

var touchEnded = function() {
  "use strict";
  deviceReleased(touchX, touchY);
  return false;
};
